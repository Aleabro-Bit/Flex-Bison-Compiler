Terminals unused in grammar

    BOOLEAN


Rules useless in parser due to conflicts

   17 flow: ε


State 0 conflicts: 15 shift/reduce, 96 reduce/reduce
State 1 conflicts: 1 shift/reduce
State 2 conflicts: 1 shift/reduce
State 4 conflicts: 1 shift/reduce
State 6 conflicts: 8 shift/reduce
State 7 conflicts: 2 shift/reduce
State 14 conflicts: 1 shift/reduce
State 15 conflicts: 1 shift/reduce
State 16 conflicts: 2 shift/reduce, 5 reduce/reduce
State 18 conflicts: 1 shift/reduce
State 26 conflicts: 5 shift/reduce
State 34 conflicts: 1 shift/reduce
State 36 conflicts: 1 shift/reduce
State 39 conflicts: 1 shift/reduce
State 41 conflicts: 8 shift/reduce
State 42 conflicts: 1 shift/reduce
State 50 conflicts: 15 shift/reduce, 81 reduce/reduce
State 51 conflicts: 8 shift/reduce
State 52 conflicts: 8 shift/reduce
State 53 conflicts: 8 shift/reduce
State 54 conflicts: 8 shift/reduce
State 55 conflicts: 8 shift/reduce
State 56 conflicts: 1 shift/reduce
State 57 conflicts: 15 shift/reduce, 81 reduce/reduce
State 58 conflicts: 1 shift/reduce
State 65 conflicts: 5 shift/reduce
State 85 conflicts: 1 shift/reduce
State 96 conflicts: 1 shift/reduce
State 97 conflicts: 15 shift/reduce, 81 reduce/reduce
State 102 conflicts: 1 shift/reduce
State 103 conflicts: 1 shift/reduce
State 105 conflicts: 1 shift/reduce, 5 reduce/reduce
State 106 conflicts: 1 shift/reduce, 5 reduce/reduce
State 111 conflicts: 15 shift/reduce, 81 reduce/reduce
State 116 conflicts: 1 shift/reduce


Grammar

    0 $accept: START $end

    1 START: ε
    2      | statements
    3      | START statements EOL
    4      | START ufunction EOL
    5      | START error EOL
    6      | START EOL

    7 statements: ε
    8           | statement ';' statements
    9           | statement

   10 statement: ε
   11          | declare
   12          | assignment
   13          | funcall
   14          | return
   15          | flow
   16          | expression

   17 flow: ε
   18     | whether
   19     | when
   20     | from
   21     | shift

   22 declare: DATA_TYPE ID init

   23 init: ASSIGN value
   24     | ε

   25 assignment: ID ASSIGN expression

   26 whether: WHETHER '(' condition ')' THEN ':' statements
   27        | WHETHER '(' condition ')' THEN ':' statements OTHERWISE ':' statements

   28 when: WHEN condition UNTIL statements

   29 from: FROM expression TO expression ';' STEP expression '%' statements '%'

   30 shift: SHIFT '(' expression ')' '%' EVENT '(' condition ')' ASSIGN expression '%'

   31 condition: expression CMP expression
   32          | expression

   33 expression: expression PLUS expression
   34           | expression MINUS expression
   35           | expression MUL expression
   36           | expression DIV expression
   37           | expression POW expression
   38           | ABS expression ABS
   39           | MINUS expression
   40           | '(' expression ')'
   41           | value

   42 value: ε
   43      | NUM
   44      | BINARY
   45      | ROMAN
   46      | ID
   47      | STR

   48 explist: expression
   49        | expression ',' explist

   50 symlist: ID
   51        | ID ',' symlist

   52 return: RETURN expression ';'

   53 ufunction: DEFINE ID '(' symlist ')' '{' statements '}'

   54 funcall: ID '(' explist ')'
   55        | FUNC '(' explist ')'


Terminals, with rules where they appear

    $end (0) 0
    '%' (37) 29 30
    '(' (40) 26 27 30 40 53 54 55
    ')' (41) 26 27 30 40 53 54 55
    ',' (44) 49 51
    ':' (58) 26 27
    ';' (59) 8 29 52
    '{' (123) 53
    '}' (125) 53
    error (256) 5
    STEP (258) 29
    TO (259) 29
    FROM (260) 29
    WHEN (261) 28
    OTHERWISE (262) 27
    WHETHER (263) 26 27
    RETURN (264) 52
    DEFINE (265) 53
    UNTIL (266) 28
    SHIFT (267) 30
    EVENT (268) 30
    EOL (269) 3 4 5 6
    THEN (270) 26 27
    BOOLEAN (271)
    PLUS <op> (272) 33
    MINUS <op> (273) 34 39
    MUL <op> (274) 35
    DIV <op> (275) 36
    POW <op> (276) 37
    ASSIGN <op> (277) 23 25 30
    ABS <op> (278) 38
    NUM <num> (279) 43
    BINARY <num> (280) 44
    ROMAN <num> (281) 45
    STR <st> (282) 47
    FUNC <fn> (283) 55
    DATA_TYPE <fn> (284) 22
    ID <s> (285) 22 25 46 50 51 53 54
    CMP <fn> (286) 31
    UMINUS (287)


Nonterminals, with rules where they appear

    $accept (41)
        on left: 0
    START <a> (42)
        on left: 1 2 3 4 5 6
        on right: 0 3 4 5 6
    statements <a> (43)
        on left: 7 8 9
        on right: 2 3 8 26 27 28 29 53
    statement <a> (44)
        on left: 10 11 12 13 14 15 16
        on right: 8 9
    flow <a> (45)
        on left: 17 18 19 20 21
        on right: 15
    declare <a> (46)
        on left: 22
        on right: 11
    init <a> (47)
        on left: 23 24
        on right: 22
    assignment <a> (48)
        on left: 25
        on right: 12
    whether <a> (49)
        on left: 26 27
        on right: 18
    when <a> (50)
        on left: 28
        on right: 19
    from <a> (51)
        on left: 29
        on right: 20
    shift <a> (52)
        on left: 30
        on right: 21
    condition <a> (53)
        on left: 31 32
        on right: 26 27 28 30
    expression <a> (54)
        on left: 33 34 35 36 37 38 39 40 41
        on right: 16 25 29 30 31 32 33 34 35 36 37 38 39 40 48 49 52
    value <a> (55)
        on left: 42 43 44 45 46 47
        on right: 23 41
    explist <a> (56)
        on left: 48 49
        on right: 49 54 55
    symlist <sl> (57)
        on left: 50 51
        on right: 51 53
    return <a> (58)
        on left: 52
        on right: 14
    ufunction <a> (59)
        on left: 53
        on right: 4
    funcall <a> (60)
        on left: 54 55
        on right: 13


State 0

    0 $accept: • START $end

    FROM       shift, and go to state 1
    WHEN       shift, and go to state 2
    WHETHER    shift, and go to state 3
    RETURN     shift, and go to state 4
    SHIFT      shift, and go to state 5
    MINUS      shift, and go to state 6
    ABS        shift, and go to state 7
    NUM        shift, and go to state 8
    BINARY     shift, and go to state 9
    ROMAN      shift, and go to state 10
    STR        shift, and go to state 11
    FUNC       shift, and go to state 12
    DATA_TYPE  shift, and go to state 13
    ID         shift, and go to state 14
    '('        shift, and go to state 15

    $end       reduce using rule 1 (START)
    $end       [reduce using rule 7 (statements)]
    $end       [reduce using rule 10 (statement)]
    $end       [reduce using rule 17 (flow)]
    $end       [reduce using rule 42 (value)]
    error      reduce using rule 1 (START)
    error      [reduce using rule 7 (statements)]
    error      [reduce using rule 10 (statement)]
    error      [reduce using rule 17 (flow)]
    error      [reduce using rule 42 (value)]
    FROM       [reduce using rule 1 (START)]
    FROM       [reduce using rule 7 (statements)]
    FROM       [reduce using rule 10 (statement)]
    FROM       [reduce using rule 17 (flow)]
    FROM       [reduce using rule 42 (value)]
    WHEN       [reduce using rule 1 (START)]
    WHEN       [reduce using rule 7 (statements)]
    WHEN       [reduce using rule 10 (statement)]
    WHEN       [reduce using rule 17 (flow)]
    WHEN       [reduce using rule 42 (value)]
    WHETHER    [reduce using rule 1 (START)]
    WHETHER    [reduce using rule 7 (statements)]
    WHETHER    [reduce using rule 10 (statement)]
    WHETHER    [reduce using rule 17 (flow)]
    WHETHER    [reduce using rule 42 (value)]
    RETURN     [reduce using rule 1 (START)]
    RETURN     [reduce using rule 7 (statements)]
    RETURN     [reduce using rule 10 (statement)]
    RETURN     [reduce using rule 17 (flow)]
    RETURN     [reduce using rule 42 (value)]
    DEFINE     reduce using rule 1 (START)
    DEFINE     [reduce using rule 7 (statements)]
    DEFINE     [reduce using rule 10 (statement)]
    DEFINE     [reduce using rule 17 (flow)]
    DEFINE     [reduce using rule 42 (value)]
    SHIFT      [reduce using rule 1 (START)]
    SHIFT      [reduce using rule 7 (statements)]
    SHIFT      [reduce using rule 10 (statement)]
    SHIFT      [reduce using rule 17 (flow)]
    SHIFT      [reduce using rule 42 (value)]
    EOL        reduce using rule 1 (START)
    EOL        [reduce using rule 7 (statements)]
    EOL        [reduce using rule 10 (statement)]
    EOL        [reduce using rule 17 (flow)]
    EOL        [reduce using rule 42 (value)]
    PLUS       reduce using rule 1 (START)
    PLUS       [reduce using rule 7 (statements)]
    PLUS       [reduce using rule 10 (statement)]
    PLUS       [reduce using rule 17 (flow)]
    PLUS       [reduce using rule 42 (value)]
    MINUS      [reduce using rule 1 (START)]
    MINUS      [reduce using rule 7 (statements)]
    MINUS      [reduce using rule 10 (statement)]
    MINUS      [reduce using rule 17 (flow)]
    MINUS      [reduce using rule 42 (value)]
    MUL        reduce using rule 1 (START)
    MUL        [reduce using rule 7 (statements)]
    MUL        [reduce using rule 10 (statement)]
    MUL        [reduce using rule 17 (flow)]
    MUL        [reduce using rule 42 (value)]
    DIV        reduce using rule 1 (START)
    DIV        [reduce using rule 7 (statements)]
    DIV        [reduce using rule 10 (statement)]
    DIV        [reduce using rule 17 (flow)]
    DIV        [reduce using rule 42 (value)]
    POW        reduce using rule 1 (START)
    POW        [reduce using rule 7 (statements)]
    POW        [reduce using rule 10 (statement)]
    POW        [reduce using rule 17 (flow)]
    POW        [reduce using rule 42 (value)]
    ABS        [reduce using rule 1 (START)]
    ABS        [reduce using rule 7 (statements)]
    ABS        [reduce using rule 10 (statement)]
    ABS        [reduce using rule 17 (flow)]
    ABS        [reduce using rule 42 (value)]
    NUM        [reduce using rule 1 (START)]
    NUM        [reduce using rule 7 (statements)]
    NUM        [reduce using rule 10 (statement)]
    NUM        [reduce using rule 17 (flow)]
    NUM        [reduce using rule 42 (value)]
    BINARY     [reduce using rule 1 (START)]
    BINARY     [reduce using rule 7 (statements)]
    BINARY     [reduce using rule 10 (statement)]
    BINARY     [reduce using rule 17 (flow)]
    BINARY     [reduce using rule 42 (value)]
    ROMAN      [reduce using rule 1 (START)]
    ROMAN      [reduce using rule 7 (statements)]
    ROMAN      [reduce using rule 10 (statement)]
    ROMAN      [reduce using rule 17 (flow)]
    ROMAN      [reduce using rule 42 (value)]
    STR        [reduce using rule 1 (START)]
    STR        [reduce using rule 7 (statements)]
    STR        [reduce using rule 10 (statement)]
    STR        [reduce using rule 17 (flow)]
    STR        [reduce using rule 42 (value)]
    FUNC       [reduce using rule 1 (START)]
    FUNC       [reduce using rule 7 (statements)]
    FUNC       [reduce using rule 10 (statement)]
    FUNC       [reduce using rule 17 (flow)]
    FUNC       [reduce using rule 42 (value)]
    DATA_TYPE  [reduce using rule 1 (START)]
    DATA_TYPE  [reduce using rule 7 (statements)]
    DATA_TYPE  [reduce using rule 10 (statement)]
    DATA_TYPE  [reduce using rule 17 (flow)]
    DATA_TYPE  [reduce using rule 42 (value)]
    ID         [reduce using rule 1 (START)]
    ID         [reduce using rule 7 (statements)]
    ID         [reduce using rule 10 (statement)]
    ID         [reduce using rule 17 (flow)]
    ID         [reduce using rule 42 (value)]
    ';'        reduce using rule 1 (START)
    ';'        [reduce using rule 7 (statements)]
    ';'        [reduce using rule 10 (statement)]
    ';'        [reduce using rule 17 (flow)]
    ';'        [reduce using rule 42 (value)]
    '('        [reduce using rule 1 (START)]
    '('        [reduce using rule 7 (statements)]
    '('        [reduce using rule 10 (statement)]
    '('        [reduce using rule 17 (flow)]
    '('        [reduce using rule 42 (value)]
    $default   reduce using rule 1 (START)

    START       go to state 16
    statements  go to state 17
    statement   go to state 18
    flow        go to state 19
    declare     go to state 20
    assignment  go to state 21
    whether     go to state 22
    when        go to state 23
    from        go to state 24
    shift       go to state 25
    expression  go to state 26
    value       go to state 27
    return      go to state 28
    funcall     go to state 29


State 1

   29 from: FROM • expression TO expression ';' STEP expression '%' statements '%'

    MINUS   shift, and go to state 6
    ABS     shift, and go to state 7
    NUM     shift, and go to state 8
    BINARY  shift, and go to state 9
    ROMAN   shift, and go to state 10
    STR     shift, and go to state 11
    ID      shift, and go to state 30
    '('     shift, and go to state 15

    MINUS     [reduce using rule 42 (value)]
    $default  reduce using rule 42 (value)

    expression  go to state 31
    value       go to state 27


State 2

   28 when: WHEN • condition UNTIL statements

    MINUS   shift, and go to state 6
    ABS     shift, and go to state 7
    NUM     shift, and go to state 8
    BINARY  shift, and go to state 9
    ROMAN   shift, and go to state 10
    STR     shift, and go to state 11
    ID      shift, and go to state 30
    '('     shift, and go to state 15

    MINUS     [reduce using rule 42 (value)]
    $default  reduce using rule 42 (value)

    condition   go to state 32
    expression  go to state 33
    value       go to state 27


State 3

   26 whether: WHETHER • '(' condition ')' THEN ':' statements
   27        | WHETHER • '(' condition ')' THEN ':' statements OTHERWISE ':' statements

    '('  shift, and go to state 34


State 4

   52 return: RETURN • expression ';'

    MINUS   shift, and go to state 6
    ABS     shift, and go to state 7
    NUM     shift, and go to state 8
    BINARY  shift, and go to state 9
    ROMAN   shift, and go to state 10
    STR     shift, and go to state 11
    ID      shift, and go to state 30
    '('     shift, and go to state 15

    MINUS     [reduce using rule 42 (value)]
    $default  reduce using rule 42 (value)

    expression  go to state 35
    value       go to state 27


State 5

   30 shift: SHIFT • '(' expression ')' '%' EVENT '(' condition ')' ASSIGN expression '%'

    '('  shift, and go to state 36


State 6

   39 expression: MINUS • expression

    MINUS   shift, and go to state 6
    ABS     shift, and go to state 7
    NUM     shift, and go to state 8
    BINARY  shift, and go to state 9
    ROMAN   shift, and go to state 10
    STR     shift, and go to state 11
    ID      shift, and go to state 30
    '('     shift, and go to state 15

    MINUS     [reduce using rule 42 (value)]
    ABS       [reduce using rule 42 (value)]
    NUM       [reduce using rule 42 (value)]
    BINARY    [reduce using rule 42 (value)]
    ROMAN     [reduce using rule 42 (value)]
    STR       [reduce using rule 42 (value)]
    ID        [reduce using rule 42 (value)]
    '('       [reduce using rule 42 (value)]
    $default  reduce using rule 42 (value)

    expression  go to state 37
    value       go to state 27


State 7

   38 expression: ABS • expression ABS

    MINUS   shift, and go to state 6
    ABS     shift, and go to state 7
    NUM     shift, and go to state 8
    BINARY  shift, and go to state 9
    ROMAN   shift, and go to state 10
    STR     shift, and go to state 11
    ID      shift, and go to state 30
    '('     shift, and go to state 15

    MINUS     [reduce using rule 42 (value)]
    ABS       [reduce using rule 42 (value)]
    $default  reduce using rule 42 (value)

    expression  go to state 38
    value       go to state 27


State 8

   43 value: NUM •

    $default  reduce using rule 43 (value)


State 9

   44 value: BINARY •

    $default  reduce using rule 44 (value)


State 10

   45 value: ROMAN •

    $default  reduce using rule 45 (value)


State 11

   47 value: STR •

    $default  reduce using rule 47 (value)


State 12

   55 funcall: FUNC • '(' explist ')'

    '('  shift, and go to state 39


State 13

   22 declare: DATA_TYPE • ID init

    ID  shift, and go to state 40


State 14

   25 assignment: ID • ASSIGN expression
   46 value: ID •
   54 funcall: ID • '(' explist ')'

    ASSIGN  shift, and go to state 41
    '('     shift, and go to state 42

    '('       [reduce using rule 46 (value)]
    $default  reduce using rule 46 (value)


State 15

   40 expression: '(' • expression ')'

    MINUS   shift, and go to state 6
    ABS     shift, and go to state 7
    NUM     shift, and go to state 8
    BINARY  shift, and go to state 9
    ROMAN   shift, and go to state 10
    STR     shift, and go to state 11
    ID      shift, and go to state 30
    '('     shift, and go to state 15

    MINUS     [reduce using rule 42 (value)]
    $default  reduce using rule 42 (value)

    expression  go to state 43
    value       go to state 27


State 16

    0 $accept: START • $end
    3 START: START • statements EOL
    4      | START • ufunction EOL
    5      | START • error EOL
    6      | START • EOL

    $end       shift, and go to state 44
    error      shift, and go to state 45
    FROM       shift, and go to state 1
    WHEN       shift, and go to state 2
    WHETHER    shift, and go to state 3
    RETURN     shift, and go to state 4
    DEFINE     shift, and go to state 46
    SHIFT      shift, and go to state 5
    EOL        shift, and go to state 47
    MINUS      shift, and go to state 6
    ABS        shift, and go to state 7
    NUM        shift, and go to state 8
    BINARY     shift, and go to state 9
    ROMAN      shift, and go to state 10
    STR        shift, and go to state 11
    FUNC       shift, and go to state 12
    DATA_TYPE  shift, and go to state 13
    ID         shift, and go to state 14
    '('        shift, and go to state 15

    EOL    [reduce using rule 7 (statements)]
    EOL    [reduce using rule 10 (statement)]
    EOL    [reduce using rule 17 (flow)]
    EOL    [reduce using rule 42 (value)]
    PLUS   reduce using rule 42 (value)
    MINUS  [reduce using rule 42 (value)]
    MUL    reduce using rule 42 (value)
    DIV    reduce using rule 42 (value)
    POW    reduce using rule 42 (value)
    ';'    reduce using rule 10 (statement)
    ';'    [reduce using rule 17 (flow)]
    ';'    [reduce using rule 42 (value)]

    statements  go to state 48
    statement   go to state 18
    flow        go to state 19
    declare     go to state 20
    assignment  go to state 21
    whether     go to state 22
    when        go to state 23
    from        go to state 24
    shift       go to state 25
    expression  go to state 26
    value       go to state 27
    return      go to state 28
    ufunction   go to state 49
    funcall     go to state 29


State 17

    2 START: statements •

    $default  reduce using rule 2 (START)


State 18

    8 statements: statement • ';' statements
    9           | statement •

    ';'  shift, and go to state 50

    ';'       [reduce using rule 9 (statements)]
    $default  reduce using rule 9 (statements)


State 19

   15 statement: flow •

    $default  reduce using rule 15 (statement)


State 20

   11 statement: declare •

    $default  reduce using rule 11 (statement)


State 21

   12 statement: assignment •

    $default  reduce using rule 12 (statement)


State 22

   18 flow: whether •

    $default  reduce using rule 18 (flow)


State 23

   19 flow: when •

    $default  reduce using rule 19 (flow)


State 24

   20 flow: from •

    $default  reduce using rule 20 (flow)


State 25

   21 flow: shift •

    $default  reduce using rule 21 (flow)


State 26

   16 statement: expression •
   33 expression: expression • PLUS expression
   34           | expression • MINUS expression
   35           | expression • MUL expression
   36           | expression • DIV expression
   37           | expression • POW expression

    PLUS   shift, and go to state 51
    MINUS  shift, and go to state 52
    MUL    shift, and go to state 53
    DIV    shift, and go to state 54
    POW    shift, and go to state 55

    PLUS      [reduce using rule 16 (statement)]
    MINUS     [reduce using rule 16 (statement)]
    MUL       [reduce using rule 16 (statement)]
    DIV       [reduce using rule 16 (statement)]
    POW       [reduce using rule 16 (statement)]
    $default  reduce using rule 16 (statement)


State 27

   41 expression: value •

    $default  reduce using rule 41 (expression)


State 28

   14 statement: return •

    $default  reduce using rule 14 (statement)


State 29

   13 statement: funcall •

    $default  reduce using rule 13 (statement)


State 30

   46 value: ID •

    $default  reduce using rule 46 (value)


State 31

   29 from: FROM expression • TO expression ';' STEP expression '%' statements '%'
   33 expression: expression • PLUS expression
   34           | expression • MINUS expression
   35           | expression • MUL expression
   36           | expression • DIV expression
   37           | expression • POW expression

    TO     shift, and go to state 56
    PLUS   shift, and go to state 51
    MINUS  shift, and go to state 52
    MUL    shift, and go to state 53
    DIV    shift, and go to state 54
    POW    shift, and go to state 55


State 32

   28 when: WHEN condition • UNTIL statements

    UNTIL  shift, and go to state 57


State 33

   31 condition: expression • CMP expression
   32          | expression •
   33 expression: expression • PLUS expression
   34           | expression • MINUS expression
   35           | expression • MUL expression
   36           | expression • DIV expression
   37           | expression • POW expression

    PLUS   shift, and go to state 51
    MINUS  shift, and go to state 52
    MUL    shift, and go to state 53
    DIV    shift, and go to state 54
    POW    shift, and go to state 55
    CMP    shift, and go to state 58

    $default  reduce using rule 32 (condition)


State 34

   26 whether: WHETHER '(' • condition ')' THEN ':' statements
   27        | WHETHER '(' • condition ')' THEN ':' statements OTHERWISE ':' statements

    MINUS   shift, and go to state 6
    ABS     shift, and go to state 7
    NUM     shift, and go to state 8
    BINARY  shift, and go to state 9
    ROMAN   shift, and go to state 10
    STR     shift, and go to state 11
    ID      shift, and go to state 30
    '('     shift, and go to state 15

    MINUS     [reduce using rule 42 (value)]
    $default  reduce using rule 42 (value)

    condition   go to state 59
    expression  go to state 33
    value       go to state 27


State 35

   33 expression: expression • PLUS expression
   34           | expression • MINUS expression
   35           | expression • MUL expression
   36           | expression • DIV expression
   37           | expression • POW expression
   52 return: RETURN expression • ';'

    PLUS   shift, and go to state 51
    MINUS  shift, and go to state 52
    MUL    shift, and go to state 53
    DIV    shift, and go to state 54
    POW    shift, and go to state 55
    ';'    shift, and go to state 60


State 36

   30 shift: SHIFT '(' • expression ')' '%' EVENT '(' condition ')' ASSIGN expression '%'

    MINUS   shift, and go to state 6
    ABS     shift, and go to state 7
    NUM     shift, and go to state 8
    BINARY  shift, and go to state 9
    ROMAN   shift, and go to state 10
    STR     shift, and go to state 11
    ID      shift, and go to state 30
    '('     shift, and go to state 15

    MINUS     [reduce using rule 42 (value)]
    $default  reduce using rule 42 (value)

    expression  go to state 61
    value       go to state 27


State 37

   33 expression: expression • PLUS expression
   34           | expression • MINUS expression
   35           | expression • MUL expression
   36           | expression • DIV expression
   37           | expression • POW expression
   39           | MINUS expression •

    $default  reduce using rule 39 (expression)


State 38

   33 expression: expression • PLUS expression
   34           | expression • MINUS expression
   35           | expression • MUL expression
   36           | expression • DIV expression
   37           | expression • POW expression
   38           | ABS expression • ABS

    PLUS   shift, and go to state 51
    MINUS  shift, and go to state 52
    MUL    shift, and go to state 53
    DIV    shift, and go to state 54
    POW    shift, and go to state 55
    ABS    shift, and go to state 62


State 39

   55 funcall: FUNC '(' • explist ')'

    MINUS   shift, and go to state 6
    ABS     shift, and go to state 7
    NUM     shift, and go to state 8
    BINARY  shift, and go to state 9
    ROMAN   shift, and go to state 10
    STR     shift, and go to state 11
    ID      shift, and go to state 30
    '('     shift, and go to state 15

    MINUS     [reduce using rule 42 (value)]
    $default  reduce using rule 42 (value)

    expression  go to state 63
    value       go to state 27
    explist     go to state 64


State 40

   22 declare: DATA_TYPE ID • init

    ASSIGN  shift, and go to state 65

    $default  reduce using rule 24 (init)

    init  go to state 66


State 41

   25 assignment: ID ASSIGN • expression

    MINUS   shift, and go to state 6
    ABS     shift, and go to state 7
    NUM     shift, and go to state 8
    BINARY  shift, and go to state 9
    ROMAN   shift, and go to state 10
    STR     shift, and go to state 11
    ID      shift, and go to state 30
    '('     shift, and go to state 15

    MINUS     [reduce using rule 42 (value)]
    ABS       [reduce using rule 42 (value)]
    NUM       [reduce using rule 42 (value)]
    BINARY    [reduce using rule 42 (value)]
    ROMAN     [reduce using rule 42 (value)]
    STR       [reduce using rule 42 (value)]
    ID        [reduce using rule 42 (value)]
    '('       [reduce using rule 42 (value)]
    $default  reduce using rule 42 (value)

    expression  go to state 67
    value       go to state 27


State 42

   54 funcall: ID '(' • explist ')'

    MINUS   shift, and go to state 6
    ABS     shift, and go to state 7
    NUM     shift, and go to state 8
    BINARY  shift, and go to state 9
    ROMAN   shift, and go to state 10
    STR     shift, and go to state 11
    ID      shift, and go to state 30
    '('     shift, and go to state 15

    MINUS     [reduce using rule 42 (value)]
    $default  reduce using rule 42 (value)

    expression  go to state 63
    value       go to state 27
    explist     go to state 68


State 43

   33 expression: expression • PLUS expression
   34           | expression • MINUS expression
   35           | expression • MUL expression
   36           | expression • DIV expression
   37           | expression • POW expression
   40           | '(' expression • ')'

    PLUS   shift, and go to state 51
    MINUS  shift, and go to state 52
    MUL    shift, and go to state 53
    DIV    shift, and go to state 54
    POW    shift, and go to state 55
    ')'    shift, and go to state 69


State 44

    0 $accept: START $end •

    $default  accept


State 45

    5 START: START error • EOL

    EOL  shift, and go to state 70


State 46

   53 ufunction: DEFINE • ID '(' symlist ')' '{' statements '}'

    ID  shift, and go to state 71


State 47

    6 START: START EOL •

    $default  reduce using rule 6 (START)


State 48

    3 START: START statements • EOL

    EOL  shift, and go to state 72


State 49

    4 START: START ufunction • EOL

    EOL  shift, and go to state 73


State 50

    8 statements: statement ';' • statements

    FROM       shift, and go to state 1
    WHEN       shift, and go to state 2
    WHETHER    shift, and go to state 3
    RETURN     shift, and go to state 4
    SHIFT      shift, and go to state 5
    MINUS      shift, and go to state 6
    ABS        shift, and go to state 7
    NUM        shift, and go to state 8
    BINARY     shift, and go to state 9
    ROMAN      shift, and go to state 10
    STR        shift, and go to state 11
    FUNC       shift, and go to state 12
    DATA_TYPE  shift, and go to state 13
    ID         shift, and go to state 14
    '('        shift, and go to state 15

    $end       reduce using rule 7 (statements)
    $end       [reduce using rule 10 (statement)]
    $end       [reduce using rule 17 (flow)]
    $end       [reduce using rule 42 (value)]
    error      reduce using rule 7 (statements)
    error      [reduce using rule 10 (statement)]
    error      [reduce using rule 17 (flow)]
    error      [reduce using rule 42 (value)]
    FROM       [reduce using rule 7 (statements)]
    FROM       [reduce using rule 10 (statement)]
    FROM       [reduce using rule 17 (flow)]
    FROM       [reduce using rule 42 (value)]
    WHEN       [reduce using rule 7 (statements)]
    WHEN       [reduce using rule 10 (statement)]
    WHEN       [reduce using rule 17 (flow)]
    WHEN       [reduce using rule 42 (value)]
    OTHERWISE  reduce using rule 7 (statements)
    OTHERWISE  [reduce using rule 10 (statement)]
    OTHERWISE  [reduce using rule 17 (flow)]
    OTHERWISE  [reduce using rule 42 (value)]
    WHETHER    [reduce using rule 7 (statements)]
    WHETHER    [reduce using rule 10 (statement)]
    WHETHER    [reduce using rule 17 (flow)]
    WHETHER    [reduce using rule 42 (value)]
    RETURN     [reduce using rule 7 (statements)]
    RETURN     [reduce using rule 10 (statement)]
    RETURN     [reduce using rule 17 (flow)]
    RETURN     [reduce using rule 42 (value)]
    DEFINE     reduce using rule 7 (statements)
    DEFINE     [reduce using rule 10 (statement)]
    DEFINE     [reduce using rule 17 (flow)]
    DEFINE     [reduce using rule 42 (value)]
    SHIFT      [reduce using rule 7 (statements)]
    SHIFT      [reduce using rule 10 (statement)]
    SHIFT      [reduce using rule 17 (flow)]
    SHIFT      [reduce using rule 42 (value)]
    EOL        reduce using rule 7 (statements)
    EOL        [reduce using rule 10 (statement)]
    EOL        [reduce using rule 17 (flow)]
    EOL        [reduce using rule 42 (value)]
    PLUS       reduce using rule 7 (statements)
    PLUS       [reduce using rule 10 (statement)]
    PLUS       [reduce using rule 17 (flow)]
    PLUS       [reduce using rule 42 (value)]
    MINUS      [reduce using rule 7 (statements)]
    MINUS      [reduce using rule 10 (statement)]
    MINUS      [reduce using rule 17 (flow)]
    MINUS      [reduce using rule 42 (value)]
    MUL        reduce using rule 7 (statements)
    MUL        [reduce using rule 10 (statement)]
    MUL        [reduce using rule 17 (flow)]
    MUL        [reduce using rule 42 (value)]
    DIV        reduce using rule 7 (statements)
    DIV        [reduce using rule 10 (statement)]
    DIV        [reduce using rule 17 (flow)]
    DIV        [reduce using rule 42 (value)]
    POW        reduce using rule 7 (statements)
    POW        [reduce using rule 10 (statement)]
    POW        [reduce using rule 17 (flow)]
    POW        [reduce using rule 42 (value)]
    ABS        [reduce using rule 7 (statements)]
    ABS        [reduce using rule 10 (statement)]
    ABS        [reduce using rule 17 (flow)]
    ABS        [reduce using rule 42 (value)]
    NUM        [reduce using rule 7 (statements)]
    NUM        [reduce using rule 10 (statement)]
    NUM        [reduce using rule 17 (flow)]
    NUM        [reduce using rule 42 (value)]
    BINARY     [reduce using rule 7 (statements)]
    BINARY     [reduce using rule 10 (statement)]
    BINARY     [reduce using rule 17 (flow)]
    BINARY     [reduce using rule 42 (value)]
    ROMAN      [reduce using rule 7 (statements)]
    ROMAN      [reduce using rule 10 (statement)]
    ROMAN      [reduce using rule 17 (flow)]
    ROMAN      [reduce using rule 42 (value)]
    STR        [reduce using rule 7 (statements)]
    STR        [reduce using rule 10 (statement)]
    STR        [reduce using rule 17 (flow)]
    STR        [reduce using rule 42 (value)]
    FUNC       [reduce using rule 7 (statements)]
    FUNC       [reduce using rule 10 (statement)]
    FUNC       [reduce using rule 17 (flow)]
    FUNC       [reduce using rule 42 (value)]
    DATA_TYPE  [reduce using rule 7 (statements)]
    DATA_TYPE  [reduce using rule 10 (statement)]
    DATA_TYPE  [reduce using rule 17 (flow)]
    DATA_TYPE  [reduce using rule 42 (value)]
    ID         [reduce using rule 7 (statements)]
    ID         [reduce using rule 10 (statement)]
    ID         [reduce using rule 17 (flow)]
    ID         [reduce using rule 42 (value)]
    ';'        reduce using rule 7 (statements)
    ';'        [reduce using rule 10 (statement)]
    ';'        [reduce using rule 17 (flow)]
    ';'        [reduce using rule 42 (value)]
    '('        [reduce using rule 7 (statements)]
    '('        [reduce using rule 10 (statement)]
    '('        [reduce using rule 17 (flow)]
    '('        [reduce using rule 42 (value)]
    '%'        reduce using rule 7 (statements)
    '%'        [reduce using rule 10 (statement)]
    '%'        [reduce using rule 17 (flow)]
    '%'        [reduce using rule 42 (value)]
    '}'        reduce using rule 7 (statements)
    '}'        [reduce using rule 10 (statement)]
    '}'        [reduce using rule 17 (flow)]
    '}'        [reduce using rule 42 (value)]
    $default   reduce using rule 7 (statements)

    statements  go to state 74
    statement   go to state 18
    flow        go to state 19
    declare     go to state 20
    assignment  go to state 21
    whether     go to state 22
    when        go to state 23
    from        go to state 24
    shift       go to state 25
    expression  go to state 26
    value       go to state 27
    return      go to state 28
    funcall     go to state 29


State 51

   33 expression: expression PLUS • expression

    MINUS   shift, and go to state 6
    ABS     shift, and go to state 7
    NUM     shift, and go to state 8
    BINARY  shift, and go to state 9
    ROMAN   shift, and go to state 10
    STR     shift, and go to state 11
    ID      shift, and go to state 30
    '('     shift, and go to state 15

    MINUS     [reduce using rule 42 (value)]
    ABS       [reduce using rule 42 (value)]
    NUM       [reduce using rule 42 (value)]
    BINARY    [reduce using rule 42 (value)]
    ROMAN     [reduce using rule 42 (value)]
    STR       [reduce using rule 42 (value)]
    ID        [reduce using rule 42 (value)]
    '('       [reduce using rule 42 (value)]
    $default  reduce using rule 42 (value)

    expression  go to state 75
    value       go to state 27


State 52

   34 expression: expression MINUS • expression

    MINUS   shift, and go to state 6
    ABS     shift, and go to state 7
    NUM     shift, and go to state 8
    BINARY  shift, and go to state 9
    ROMAN   shift, and go to state 10
    STR     shift, and go to state 11
    ID      shift, and go to state 30
    '('     shift, and go to state 15

    MINUS     [reduce using rule 42 (value)]
    ABS       [reduce using rule 42 (value)]
    NUM       [reduce using rule 42 (value)]
    BINARY    [reduce using rule 42 (value)]
    ROMAN     [reduce using rule 42 (value)]
    STR       [reduce using rule 42 (value)]
    ID        [reduce using rule 42 (value)]
    '('       [reduce using rule 42 (value)]
    $default  reduce using rule 42 (value)

    expression  go to state 76
    value       go to state 27


State 53

   35 expression: expression MUL • expression

    MINUS   shift, and go to state 6
    ABS     shift, and go to state 7
    NUM     shift, and go to state 8
    BINARY  shift, and go to state 9
    ROMAN   shift, and go to state 10
    STR     shift, and go to state 11
    ID      shift, and go to state 30
    '('     shift, and go to state 15

    MINUS     [reduce using rule 42 (value)]
    ABS       [reduce using rule 42 (value)]
    NUM       [reduce using rule 42 (value)]
    BINARY    [reduce using rule 42 (value)]
    ROMAN     [reduce using rule 42 (value)]
    STR       [reduce using rule 42 (value)]
    ID        [reduce using rule 42 (value)]
    '('       [reduce using rule 42 (value)]
    $default  reduce using rule 42 (value)

    expression  go to state 77
    value       go to state 27


State 54

   36 expression: expression DIV • expression

    MINUS   shift, and go to state 6
    ABS     shift, and go to state 7
    NUM     shift, and go to state 8
    BINARY  shift, and go to state 9
    ROMAN   shift, and go to state 10
    STR     shift, and go to state 11
    ID      shift, and go to state 30
    '('     shift, and go to state 15

    MINUS     [reduce using rule 42 (value)]
    ABS       [reduce using rule 42 (value)]
    NUM       [reduce using rule 42 (value)]
    BINARY    [reduce using rule 42 (value)]
    ROMAN     [reduce using rule 42 (value)]
    STR       [reduce using rule 42 (value)]
    ID        [reduce using rule 42 (value)]
    '('       [reduce using rule 42 (value)]
    $default  reduce using rule 42 (value)

    expression  go to state 78
    value       go to state 27


State 55

   37 expression: expression POW • expression

    MINUS   shift, and go to state 6
    ABS     shift, and go to state 7
    NUM     shift, and go to state 8
    BINARY  shift, and go to state 9
    ROMAN   shift, and go to state 10
    STR     shift, and go to state 11
    ID      shift, and go to state 30
    '('     shift, and go to state 15

    MINUS     [reduce using rule 42 (value)]
    ABS       [reduce using rule 42 (value)]
    NUM       [reduce using rule 42 (value)]
    BINARY    [reduce using rule 42 (value)]
    ROMAN     [reduce using rule 42 (value)]
    STR       [reduce using rule 42 (value)]
    ID        [reduce using rule 42 (value)]
    '('       [reduce using rule 42 (value)]
    $default  reduce using rule 42 (value)

    expression  go to state 79
    value       go to state 27


State 56

   29 from: FROM expression TO • expression ';' STEP expression '%' statements '%'

    MINUS   shift, and go to state 6
    ABS     shift, and go to state 7
    NUM     shift, and go to state 8
    BINARY  shift, and go to state 9
    ROMAN   shift, and go to state 10
    STR     shift, and go to state 11
    ID      shift, and go to state 30
    '('     shift, and go to state 15

    MINUS     [reduce using rule 42 (value)]
    $default  reduce using rule 42 (value)

    expression  go to state 80
    value       go to state 27


State 57

   28 when: WHEN condition UNTIL • statements

    FROM       shift, and go to state 1
    WHEN       shift, and go to state 2
    WHETHER    shift, and go to state 3
    RETURN     shift, and go to state 4
    SHIFT      shift, and go to state 5
    MINUS      shift, and go to state 6
    ABS        shift, and go to state 7
    NUM        shift, and go to state 8
    BINARY     shift, and go to state 9
    ROMAN      shift, and go to state 10
    STR        shift, and go to state 11
    FUNC       shift, and go to state 12
    DATA_TYPE  shift, and go to state 13
    ID         shift, and go to state 14
    '('        shift, and go to state 15

    $end       reduce using rule 7 (statements)
    $end       [reduce using rule 10 (statement)]
    $end       [reduce using rule 17 (flow)]
    $end       [reduce using rule 42 (value)]
    error      reduce using rule 7 (statements)
    error      [reduce using rule 10 (statement)]
    error      [reduce using rule 17 (flow)]
    error      [reduce using rule 42 (value)]
    FROM       [reduce using rule 7 (statements)]
    FROM       [reduce using rule 10 (statement)]
    FROM       [reduce using rule 17 (flow)]
    FROM       [reduce using rule 42 (value)]
    WHEN       [reduce using rule 7 (statements)]
    WHEN       [reduce using rule 10 (statement)]
    WHEN       [reduce using rule 17 (flow)]
    WHEN       [reduce using rule 42 (value)]
    OTHERWISE  reduce using rule 7 (statements)
    OTHERWISE  [reduce using rule 10 (statement)]
    OTHERWISE  [reduce using rule 17 (flow)]
    OTHERWISE  [reduce using rule 42 (value)]
    WHETHER    [reduce using rule 7 (statements)]
    WHETHER    [reduce using rule 10 (statement)]
    WHETHER    [reduce using rule 17 (flow)]
    WHETHER    [reduce using rule 42 (value)]
    RETURN     [reduce using rule 7 (statements)]
    RETURN     [reduce using rule 10 (statement)]
    RETURN     [reduce using rule 17 (flow)]
    RETURN     [reduce using rule 42 (value)]
    DEFINE     reduce using rule 7 (statements)
    DEFINE     [reduce using rule 10 (statement)]
    DEFINE     [reduce using rule 17 (flow)]
    DEFINE     [reduce using rule 42 (value)]
    SHIFT      [reduce using rule 7 (statements)]
    SHIFT      [reduce using rule 10 (statement)]
    SHIFT      [reduce using rule 17 (flow)]
    SHIFT      [reduce using rule 42 (value)]
    EOL        reduce using rule 7 (statements)
    EOL        [reduce using rule 10 (statement)]
    EOL        [reduce using rule 17 (flow)]
    EOL        [reduce using rule 42 (value)]
    PLUS       reduce using rule 7 (statements)
    PLUS       [reduce using rule 10 (statement)]
    PLUS       [reduce using rule 17 (flow)]
    PLUS       [reduce using rule 42 (value)]
    MINUS      [reduce using rule 7 (statements)]
    MINUS      [reduce using rule 10 (statement)]
    MINUS      [reduce using rule 17 (flow)]
    MINUS      [reduce using rule 42 (value)]
    MUL        reduce using rule 7 (statements)
    MUL        [reduce using rule 10 (statement)]
    MUL        [reduce using rule 17 (flow)]
    MUL        [reduce using rule 42 (value)]
    DIV        reduce using rule 7 (statements)
    DIV        [reduce using rule 10 (statement)]
    DIV        [reduce using rule 17 (flow)]
    DIV        [reduce using rule 42 (value)]
    POW        reduce using rule 7 (statements)
    POW        [reduce using rule 10 (statement)]
    POW        [reduce using rule 17 (flow)]
    POW        [reduce using rule 42 (value)]
    ABS        [reduce using rule 7 (statements)]
    ABS        [reduce using rule 10 (statement)]
    ABS        [reduce using rule 17 (flow)]
    ABS        [reduce using rule 42 (value)]
    NUM        [reduce using rule 7 (statements)]
    NUM        [reduce using rule 10 (statement)]
    NUM        [reduce using rule 17 (flow)]
    NUM        [reduce using rule 42 (value)]
    BINARY     [reduce using rule 7 (statements)]
    BINARY     [reduce using rule 10 (statement)]
    BINARY     [reduce using rule 17 (flow)]
    BINARY     [reduce using rule 42 (value)]
    ROMAN      [reduce using rule 7 (statements)]
    ROMAN      [reduce using rule 10 (statement)]
    ROMAN      [reduce using rule 17 (flow)]
    ROMAN      [reduce using rule 42 (value)]
    STR        [reduce using rule 7 (statements)]
    STR        [reduce using rule 10 (statement)]
    STR        [reduce using rule 17 (flow)]
    STR        [reduce using rule 42 (value)]
    FUNC       [reduce using rule 7 (statements)]
    FUNC       [reduce using rule 10 (statement)]
    FUNC       [reduce using rule 17 (flow)]
    FUNC       [reduce using rule 42 (value)]
    DATA_TYPE  [reduce using rule 7 (statements)]
    DATA_TYPE  [reduce using rule 10 (statement)]
    DATA_TYPE  [reduce using rule 17 (flow)]
    DATA_TYPE  [reduce using rule 42 (value)]
    ID         [reduce using rule 7 (statements)]
    ID         [reduce using rule 10 (statement)]
    ID         [reduce using rule 17 (flow)]
    ID         [reduce using rule 42 (value)]
    ';'        reduce using rule 7 (statements)
    ';'        [reduce using rule 10 (statement)]
    ';'        [reduce using rule 17 (flow)]
    ';'        [reduce using rule 42 (value)]
    '('        [reduce using rule 7 (statements)]
    '('        [reduce using rule 10 (statement)]
    '('        [reduce using rule 17 (flow)]
    '('        [reduce using rule 42 (value)]
    '%'        reduce using rule 7 (statements)
    '%'        [reduce using rule 10 (statement)]
    '%'        [reduce using rule 17 (flow)]
    '%'        [reduce using rule 42 (value)]
    '}'        reduce using rule 7 (statements)
    '}'        [reduce using rule 10 (statement)]
    '}'        [reduce using rule 17 (flow)]
    '}'        [reduce using rule 42 (value)]
    $default   reduce using rule 7 (statements)

    statements  go to state 81
    statement   go to state 18
    flow        go to state 19
    declare     go to state 20
    assignment  go to state 21
    whether     go to state 22
    when        go to state 23
    from        go to state 24
    shift       go to state 25
    expression  go to state 26
    value       go to state 27
    return      go to state 28
    funcall     go to state 29


State 58

   31 condition: expression CMP • expression

    MINUS   shift, and go to state 6
    ABS     shift, and go to state 7
    NUM     shift, and go to state 8
    BINARY  shift, and go to state 9
    ROMAN   shift, and go to state 10
    STR     shift, and go to state 11
    ID      shift, and go to state 30
    '('     shift, and go to state 15

    MINUS     [reduce using rule 42 (value)]
    $default  reduce using rule 42 (value)

    expression  go to state 82
    value       go to state 27


State 59

   26 whether: WHETHER '(' condition • ')' THEN ':' statements
   27        | WHETHER '(' condition • ')' THEN ':' statements OTHERWISE ':' statements

    ')'  shift, and go to state 83


State 60

   52 return: RETURN expression ';' •

    $default  reduce using rule 52 (return)


State 61

   30 shift: SHIFT '(' expression • ')' '%' EVENT '(' condition ')' ASSIGN expression '%'
   33 expression: expression • PLUS expression
   34           | expression • MINUS expression
   35           | expression • MUL expression
   36           | expression • DIV expression
   37           | expression • POW expression

    PLUS   shift, and go to state 51
    MINUS  shift, and go to state 52
    MUL    shift, and go to state 53
    DIV    shift, and go to state 54
    POW    shift, and go to state 55
    ')'    shift, and go to state 84


State 62

   38 expression: ABS expression ABS •

    $default  reduce using rule 38 (expression)


State 63

   33 expression: expression • PLUS expression
   34           | expression • MINUS expression
   35           | expression • MUL expression
   36           | expression • DIV expression
   37           | expression • POW expression
   48 explist: expression •
   49        | expression • ',' explist

    PLUS   shift, and go to state 51
    MINUS  shift, and go to state 52
    MUL    shift, and go to state 53
    DIV    shift, and go to state 54
    POW    shift, and go to state 55
    ','    shift, and go to state 85

    $default  reduce using rule 48 (explist)


State 64

   55 funcall: FUNC '(' explist • ')'

    ')'  shift, and go to state 86


State 65

   23 init: ASSIGN • value

    NUM     shift, and go to state 8
    BINARY  shift, and go to state 9
    ROMAN   shift, and go to state 10
    STR     shift, and go to state 11
    ID      shift, and go to state 30

    NUM       [reduce using rule 42 (value)]
    BINARY    [reduce using rule 42 (value)]
    ROMAN     [reduce using rule 42 (value)]
    STR       [reduce using rule 42 (value)]
    ID        [reduce using rule 42 (value)]
    $default  reduce using rule 42 (value)

    value  go to state 87


State 66

   22 declare: DATA_TYPE ID init •

    $default  reduce using rule 22 (declare)


State 67

   25 assignment: ID ASSIGN expression •
   33 expression: expression • PLUS expression
   34           | expression • MINUS expression
   35           | expression • MUL expression
   36           | expression • DIV expression
   37           | expression • POW expression

    PLUS   shift, and go to state 51
    MINUS  shift, and go to state 52
    MUL    shift, and go to state 53
    DIV    shift, and go to state 54
    POW    shift, and go to state 55

    $default  reduce using rule 25 (assignment)


State 68

   54 funcall: ID '(' explist • ')'

    ')'  shift, and go to state 88


State 69

   40 expression: '(' expression ')' •

    $default  reduce using rule 40 (expression)


State 70

    5 START: START error EOL •

    $default  reduce using rule 5 (START)


State 71

   53 ufunction: DEFINE ID • '(' symlist ')' '{' statements '}'

    '('  shift, and go to state 89


State 72

    3 START: START statements EOL •

    $default  reduce using rule 3 (START)


State 73

    4 START: START ufunction EOL •

    $default  reduce using rule 4 (START)


State 74

    8 statements: statement ';' statements •

    $default  reduce using rule 8 (statements)


State 75

   33 expression: expression • PLUS expression
   33           | expression PLUS expression •
   34           | expression • MINUS expression
   35           | expression • MUL expression
   36           | expression • DIV expression
   37           | expression • POW expression

    MUL  shift, and go to state 53
    DIV  shift, and go to state 54

    $default  reduce using rule 33 (expression)


State 76

   33 expression: expression • PLUS expression
   34           | expression • MINUS expression
   34           | expression MINUS expression •
   35           | expression • MUL expression
   36           | expression • DIV expression
   37           | expression • POW expression

    MUL  shift, and go to state 53
    DIV  shift, and go to state 54

    $default  reduce using rule 34 (expression)


State 77

   33 expression: expression • PLUS expression
   34           | expression • MINUS expression
   35           | expression • MUL expression
   35           | expression MUL expression •
   36           | expression • DIV expression
   37           | expression • POW expression

    $default  reduce using rule 35 (expression)


State 78

   33 expression: expression • PLUS expression
   34           | expression • MINUS expression
   35           | expression • MUL expression
   36           | expression • DIV expression
   36           | expression DIV expression •
   37           | expression • POW expression

    $default  reduce using rule 36 (expression)


State 79

   33 expression: expression • PLUS expression
   34           | expression • MINUS expression
   35           | expression • MUL expression
   36           | expression • DIV expression
   37           | expression • POW expression
   37           | expression POW expression •

    MUL  shift, and go to state 53
    DIV  shift, and go to state 54

    $default  reduce using rule 37 (expression)


State 80

   29 from: FROM expression TO expression • ';' STEP expression '%' statements '%'
   33 expression: expression • PLUS expression
   34           | expression • MINUS expression
   35           | expression • MUL expression
   36           | expression • DIV expression
   37           | expression • POW expression

    PLUS   shift, and go to state 51
    MINUS  shift, and go to state 52
    MUL    shift, and go to state 53
    DIV    shift, and go to state 54
    POW    shift, and go to state 55
    ';'    shift, and go to state 90


State 81

   28 when: WHEN condition UNTIL statements •

    $default  reduce using rule 28 (when)


State 82

   31 condition: expression CMP expression •
   33 expression: expression • PLUS expression
   34           | expression • MINUS expression
   35           | expression • MUL expression
   36           | expression • DIV expression
   37           | expression • POW expression

    PLUS   shift, and go to state 51
    MINUS  shift, and go to state 52
    MUL    shift, and go to state 53
    DIV    shift, and go to state 54
    POW    shift, and go to state 55

    $default  reduce using rule 31 (condition)


State 83

   26 whether: WHETHER '(' condition ')' • THEN ':' statements
   27        | WHETHER '(' condition ')' • THEN ':' statements OTHERWISE ':' statements

    THEN  shift, and go to state 91


State 84

   30 shift: SHIFT '(' expression ')' • '%' EVENT '(' condition ')' ASSIGN expression '%'

    '%'  shift, and go to state 92


State 85

   49 explist: expression ',' • explist

    MINUS   shift, and go to state 6
    ABS     shift, and go to state 7
    NUM     shift, and go to state 8
    BINARY  shift, and go to state 9
    ROMAN   shift, and go to state 10
    STR     shift, and go to state 11
    ID      shift, and go to state 30
    '('     shift, and go to state 15

    MINUS     [reduce using rule 42 (value)]
    $default  reduce using rule 42 (value)

    expression  go to state 63
    value       go to state 27
    explist     go to state 93


State 86

   55 funcall: FUNC '(' explist ')' •

    $default  reduce using rule 55 (funcall)


State 87

   23 init: ASSIGN value •

    $default  reduce using rule 23 (init)


State 88

   54 funcall: ID '(' explist ')' •

    $default  reduce using rule 54 (funcall)


State 89

   53 ufunction: DEFINE ID '(' • symlist ')' '{' statements '}'

    ID  shift, and go to state 94

    symlist  go to state 95


State 90

   29 from: FROM expression TO expression ';' • STEP expression '%' statements '%'

    STEP  shift, and go to state 96


State 91

   26 whether: WHETHER '(' condition ')' THEN • ':' statements
   27        | WHETHER '(' condition ')' THEN • ':' statements OTHERWISE ':' statements

    ':'  shift, and go to state 97


State 92

   30 shift: SHIFT '(' expression ')' '%' • EVENT '(' condition ')' ASSIGN expression '%'

    EVENT  shift, and go to state 98


State 93

   49 explist: expression ',' explist •

    $default  reduce using rule 49 (explist)


State 94

   50 symlist: ID •
   51        | ID • ',' symlist

    ','  shift, and go to state 99

    $default  reduce using rule 50 (symlist)


State 95

   53 ufunction: DEFINE ID '(' symlist • ')' '{' statements '}'

    ')'  shift, and go to state 100


State 96

   29 from: FROM expression TO expression ';' STEP • expression '%' statements '%'

    MINUS   shift, and go to state 6
    ABS     shift, and go to state 7
    NUM     shift, and go to state 8
    BINARY  shift, and go to state 9
    ROMAN   shift, and go to state 10
    STR     shift, and go to state 11
    ID      shift, and go to state 30
    '('     shift, and go to state 15

    MINUS     [reduce using rule 42 (value)]
    $default  reduce using rule 42 (value)

    expression  go to state 101
    value       go to state 27


State 97

   26 whether: WHETHER '(' condition ')' THEN ':' • statements
   27        | WHETHER '(' condition ')' THEN ':' • statements OTHERWISE ':' statements

    FROM       shift, and go to state 1
    WHEN       shift, and go to state 2
    WHETHER    shift, and go to state 3
    RETURN     shift, and go to state 4
    SHIFT      shift, and go to state 5
    MINUS      shift, and go to state 6
    ABS        shift, and go to state 7
    NUM        shift, and go to state 8
    BINARY     shift, and go to state 9
    ROMAN      shift, and go to state 10
    STR        shift, and go to state 11
    FUNC       shift, and go to state 12
    DATA_TYPE  shift, and go to state 13
    ID         shift, and go to state 14
    '('        shift, and go to state 15

    $end       reduce using rule 7 (statements)
    $end       [reduce using rule 10 (statement)]
    $end       [reduce using rule 17 (flow)]
    $end       [reduce using rule 42 (value)]
    error      reduce using rule 7 (statements)
    error      [reduce using rule 10 (statement)]
    error      [reduce using rule 17 (flow)]
    error      [reduce using rule 42 (value)]
    FROM       [reduce using rule 7 (statements)]
    FROM       [reduce using rule 10 (statement)]
    FROM       [reduce using rule 17 (flow)]
    FROM       [reduce using rule 42 (value)]
    WHEN       [reduce using rule 7 (statements)]
    WHEN       [reduce using rule 10 (statement)]
    WHEN       [reduce using rule 17 (flow)]
    WHEN       [reduce using rule 42 (value)]
    OTHERWISE  reduce using rule 7 (statements)
    OTHERWISE  [reduce using rule 10 (statement)]
    OTHERWISE  [reduce using rule 17 (flow)]
    OTHERWISE  [reduce using rule 42 (value)]
    WHETHER    [reduce using rule 7 (statements)]
    WHETHER    [reduce using rule 10 (statement)]
    WHETHER    [reduce using rule 17 (flow)]
    WHETHER    [reduce using rule 42 (value)]
    RETURN     [reduce using rule 7 (statements)]
    RETURN     [reduce using rule 10 (statement)]
    RETURN     [reduce using rule 17 (flow)]
    RETURN     [reduce using rule 42 (value)]
    DEFINE     reduce using rule 7 (statements)
    DEFINE     [reduce using rule 10 (statement)]
    DEFINE     [reduce using rule 17 (flow)]
    DEFINE     [reduce using rule 42 (value)]
    SHIFT      [reduce using rule 7 (statements)]
    SHIFT      [reduce using rule 10 (statement)]
    SHIFT      [reduce using rule 17 (flow)]
    SHIFT      [reduce using rule 42 (value)]
    EOL        reduce using rule 7 (statements)
    EOL        [reduce using rule 10 (statement)]
    EOL        [reduce using rule 17 (flow)]
    EOL        [reduce using rule 42 (value)]
    PLUS       reduce using rule 7 (statements)
    PLUS       [reduce using rule 10 (statement)]
    PLUS       [reduce using rule 17 (flow)]
    PLUS       [reduce using rule 42 (value)]
    MINUS      [reduce using rule 7 (statements)]
    MINUS      [reduce using rule 10 (statement)]
    MINUS      [reduce using rule 17 (flow)]
    MINUS      [reduce using rule 42 (value)]
    MUL        reduce using rule 7 (statements)
    MUL        [reduce using rule 10 (statement)]
    MUL        [reduce using rule 17 (flow)]
    MUL        [reduce using rule 42 (value)]
    DIV        reduce using rule 7 (statements)
    DIV        [reduce using rule 10 (statement)]
    DIV        [reduce using rule 17 (flow)]
    DIV        [reduce using rule 42 (value)]
    POW        reduce using rule 7 (statements)
    POW        [reduce using rule 10 (statement)]
    POW        [reduce using rule 17 (flow)]
    POW        [reduce using rule 42 (value)]
    ABS        [reduce using rule 7 (statements)]
    ABS        [reduce using rule 10 (statement)]
    ABS        [reduce using rule 17 (flow)]
    ABS        [reduce using rule 42 (value)]
    NUM        [reduce using rule 7 (statements)]
    NUM        [reduce using rule 10 (statement)]
    NUM        [reduce using rule 17 (flow)]
    NUM        [reduce using rule 42 (value)]
    BINARY     [reduce using rule 7 (statements)]
    BINARY     [reduce using rule 10 (statement)]
    BINARY     [reduce using rule 17 (flow)]
    BINARY     [reduce using rule 42 (value)]
    ROMAN      [reduce using rule 7 (statements)]
    ROMAN      [reduce using rule 10 (statement)]
    ROMAN      [reduce using rule 17 (flow)]
    ROMAN      [reduce using rule 42 (value)]
    STR        [reduce using rule 7 (statements)]
    STR        [reduce using rule 10 (statement)]
    STR        [reduce using rule 17 (flow)]
    STR        [reduce using rule 42 (value)]
    FUNC       [reduce using rule 7 (statements)]
    FUNC       [reduce using rule 10 (statement)]
    FUNC       [reduce using rule 17 (flow)]
    FUNC       [reduce using rule 42 (value)]
    DATA_TYPE  [reduce using rule 7 (statements)]
    DATA_TYPE  [reduce using rule 10 (statement)]
    DATA_TYPE  [reduce using rule 17 (flow)]
    DATA_TYPE  [reduce using rule 42 (value)]
    ID         [reduce using rule 7 (statements)]
    ID         [reduce using rule 10 (statement)]
    ID         [reduce using rule 17 (flow)]
    ID         [reduce using rule 42 (value)]
    ';'        reduce using rule 7 (statements)
    ';'        [reduce using rule 10 (statement)]
    ';'        [reduce using rule 17 (flow)]
    ';'        [reduce using rule 42 (value)]
    '('        [reduce using rule 7 (statements)]
    '('        [reduce using rule 10 (statement)]
    '('        [reduce using rule 17 (flow)]
    '('        [reduce using rule 42 (value)]
    '%'        reduce using rule 7 (statements)
    '%'        [reduce using rule 10 (statement)]
    '%'        [reduce using rule 17 (flow)]
    '%'        [reduce using rule 42 (value)]
    '}'        reduce using rule 7 (statements)
    '}'        [reduce using rule 10 (statement)]
    '}'        [reduce using rule 17 (flow)]
    '}'        [reduce using rule 42 (value)]
    $default   reduce using rule 7 (statements)

    statements  go to state 102
    statement   go to state 18
    flow        go to state 19
    declare     go to state 20
    assignment  go to state 21
    whether     go to state 22
    when        go to state 23
    from        go to state 24
    shift       go to state 25
    expression  go to state 26
    value       go to state 27
    return      go to state 28
    funcall     go to state 29


State 98

   30 shift: SHIFT '(' expression ')' '%' EVENT • '(' condition ')' ASSIGN expression '%'

    '('  shift, and go to state 103


State 99

   51 symlist: ID ',' • symlist

    ID  shift, and go to state 94

    symlist  go to state 104


State 100

   53 ufunction: DEFINE ID '(' symlist ')' • '{' statements '}'

    '{'  shift, and go to state 105


State 101

   29 from: FROM expression TO expression ';' STEP expression • '%' statements '%'
   33 expression: expression • PLUS expression
   34           | expression • MINUS expression
   35           | expression • MUL expression
   36           | expression • DIV expression
   37           | expression • POW expression

    PLUS   shift, and go to state 51
    MINUS  shift, and go to state 52
    MUL    shift, and go to state 53
    DIV    shift, and go to state 54
    POW    shift, and go to state 55
    '%'    shift, and go to state 106


State 102

   26 whether: WHETHER '(' condition ')' THEN ':' statements •
   27        | WHETHER '(' condition ')' THEN ':' statements • OTHERWISE ':' statements

    OTHERWISE  shift, and go to state 107

    OTHERWISE  [reduce using rule 26 (whether)]
    $default   reduce using rule 26 (whether)


State 103

   30 shift: SHIFT '(' expression ')' '%' EVENT '(' • condition ')' ASSIGN expression '%'

    MINUS   shift, and go to state 6
    ABS     shift, and go to state 7
    NUM     shift, and go to state 8
    BINARY  shift, and go to state 9
    ROMAN   shift, and go to state 10
    STR     shift, and go to state 11
    ID      shift, and go to state 30
    '('     shift, and go to state 15

    MINUS     [reduce using rule 42 (value)]
    $default  reduce using rule 42 (value)

    condition   go to state 108
    expression  go to state 33
    value       go to state 27


State 104

   51 symlist: ID ',' symlist •

    $default  reduce using rule 51 (symlist)


State 105

   53 ufunction: DEFINE ID '(' symlist ')' '{' • statements '}'

    FROM       shift, and go to state 1
    WHEN       shift, and go to state 2
    WHETHER    shift, and go to state 3
    RETURN     shift, and go to state 4
    SHIFT      shift, and go to state 5
    MINUS      shift, and go to state 6
    ABS        shift, and go to state 7
    NUM        shift, and go to state 8
    BINARY     shift, and go to state 9
    ROMAN      shift, and go to state 10
    STR        shift, and go to state 11
    FUNC       shift, and go to state 12
    DATA_TYPE  shift, and go to state 13
    ID         shift, and go to state 14
    '('        shift, and go to state 15

    MINUS     [reduce using rule 42 (value)]
    ';'       reduce using rule 10 (statement)
    ';'       [reduce using rule 17 (flow)]
    ';'       [reduce using rule 42 (value)]
    '}'       reduce using rule 7 (statements)
    '}'       [reduce using rule 10 (statement)]
    '}'       [reduce using rule 17 (flow)]
    '}'       [reduce using rule 42 (value)]
    $default  reduce using rule 42 (value)

    statements  go to state 109
    statement   go to state 18
    flow        go to state 19
    declare     go to state 20
    assignment  go to state 21
    whether     go to state 22
    when        go to state 23
    from        go to state 24
    shift       go to state 25
    expression  go to state 26
    value       go to state 27
    return      go to state 28
    funcall     go to state 29


State 106

   29 from: FROM expression TO expression ';' STEP expression '%' • statements '%'

    FROM       shift, and go to state 1
    WHEN       shift, and go to state 2
    WHETHER    shift, and go to state 3
    RETURN     shift, and go to state 4
    SHIFT      shift, and go to state 5
    MINUS      shift, and go to state 6
    ABS        shift, and go to state 7
    NUM        shift, and go to state 8
    BINARY     shift, and go to state 9
    ROMAN      shift, and go to state 10
    STR        shift, and go to state 11
    FUNC       shift, and go to state 12
    DATA_TYPE  shift, and go to state 13
    ID         shift, and go to state 14
    '('        shift, and go to state 15

    MINUS     [reduce using rule 42 (value)]
    ';'       reduce using rule 10 (statement)
    ';'       [reduce using rule 17 (flow)]
    ';'       [reduce using rule 42 (value)]
    '%'       reduce using rule 7 (statements)
    '%'       [reduce using rule 10 (statement)]
    '%'       [reduce using rule 17 (flow)]
    '%'       [reduce using rule 42 (value)]
    $default  reduce using rule 42 (value)

    statements  go to state 110
    statement   go to state 18
    flow        go to state 19
    declare     go to state 20
    assignment  go to state 21
    whether     go to state 22
    when        go to state 23
    from        go to state 24
    shift       go to state 25
    expression  go to state 26
    value       go to state 27
    return      go to state 28
    funcall     go to state 29


State 107

   27 whether: WHETHER '(' condition ')' THEN ':' statements OTHERWISE • ':' statements

    ':'  shift, and go to state 111


State 108

   30 shift: SHIFT '(' expression ')' '%' EVENT '(' condition • ')' ASSIGN expression '%'

    ')'  shift, and go to state 112


State 109

   53 ufunction: DEFINE ID '(' symlist ')' '{' statements • '}'

    '}'  shift, and go to state 113


State 110

   29 from: FROM expression TO expression ';' STEP expression '%' statements • '%'

    '%'  shift, and go to state 114


State 111

   27 whether: WHETHER '(' condition ')' THEN ':' statements OTHERWISE ':' • statements

    FROM       shift, and go to state 1
    WHEN       shift, and go to state 2
    WHETHER    shift, and go to state 3
    RETURN     shift, and go to state 4
    SHIFT      shift, and go to state 5
    MINUS      shift, and go to state 6
    ABS        shift, and go to state 7
    NUM        shift, and go to state 8
    BINARY     shift, and go to state 9
    ROMAN      shift, and go to state 10
    STR        shift, and go to state 11
    FUNC       shift, and go to state 12
    DATA_TYPE  shift, and go to state 13
    ID         shift, and go to state 14
    '('        shift, and go to state 15

    $end       reduce using rule 7 (statements)
    $end       [reduce using rule 10 (statement)]
    $end       [reduce using rule 17 (flow)]
    $end       [reduce using rule 42 (value)]
    error      reduce using rule 7 (statements)
    error      [reduce using rule 10 (statement)]
    error      [reduce using rule 17 (flow)]
    error      [reduce using rule 42 (value)]
    FROM       [reduce using rule 7 (statements)]
    FROM       [reduce using rule 10 (statement)]
    FROM       [reduce using rule 17 (flow)]
    FROM       [reduce using rule 42 (value)]
    WHEN       [reduce using rule 7 (statements)]
    WHEN       [reduce using rule 10 (statement)]
    WHEN       [reduce using rule 17 (flow)]
    WHEN       [reduce using rule 42 (value)]
    OTHERWISE  reduce using rule 7 (statements)
    OTHERWISE  [reduce using rule 10 (statement)]
    OTHERWISE  [reduce using rule 17 (flow)]
    OTHERWISE  [reduce using rule 42 (value)]
    WHETHER    [reduce using rule 7 (statements)]
    WHETHER    [reduce using rule 10 (statement)]
    WHETHER    [reduce using rule 17 (flow)]
    WHETHER    [reduce using rule 42 (value)]
    RETURN     [reduce using rule 7 (statements)]
    RETURN     [reduce using rule 10 (statement)]
    RETURN     [reduce using rule 17 (flow)]
    RETURN     [reduce using rule 42 (value)]
    DEFINE     reduce using rule 7 (statements)
    DEFINE     [reduce using rule 10 (statement)]
    DEFINE     [reduce using rule 17 (flow)]
    DEFINE     [reduce using rule 42 (value)]
    SHIFT      [reduce using rule 7 (statements)]
    SHIFT      [reduce using rule 10 (statement)]
    SHIFT      [reduce using rule 17 (flow)]
    SHIFT      [reduce using rule 42 (value)]
    EOL        reduce using rule 7 (statements)
    EOL        [reduce using rule 10 (statement)]
    EOL        [reduce using rule 17 (flow)]
    EOL        [reduce using rule 42 (value)]
    PLUS       reduce using rule 7 (statements)
    PLUS       [reduce using rule 10 (statement)]
    PLUS       [reduce using rule 17 (flow)]
    PLUS       [reduce using rule 42 (value)]
    MINUS      [reduce using rule 7 (statements)]
    MINUS      [reduce using rule 10 (statement)]
    MINUS      [reduce using rule 17 (flow)]
    MINUS      [reduce using rule 42 (value)]
    MUL        reduce using rule 7 (statements)
    MUL        [reduce using rule 10 (statement)]
    MUL        [reduce using rule 17 (flow)]
    MUL        [reduce using rule 42 (value)]
    DIV        reduce using rule 7 (statements)
    DIV        [reduce using rule 10 (statement)]
    DIV        [reduce using rule 17 (flow)]
    DIV        [reduce using rule 42 (value)]
    POW        reduce using rule 7 (statements)
    POW        [reduce using rule 10 (statement)]
    POW        [reduce using rule 17 (flow)]
    POW        [reduce using rule 42 (value)]
    ABS        [reduce using rule 7 (statements)]
    ABS        [reduce using rule 10 (statement)]
    ABS        [reduce using rule 17 (flow)]
    ABS        [reduce using rule 42 (value)]
    NUM        [reduce using rule 7 (statements)]
    NUM        [reduce using rule 10 (statement)]
    NUM        [reduce using rule 17 (flow)]
    NUM        [reduce using rule 42 (value)]
    BINARY     [reduce using rule 7 (statements)]
    BINARY     [reduce using rule 10 (statement)]
    BINARY     [reduce using rule 17 (flow)]
    BINARY     [reduce using rule 42 (value)]
    ROMAN      [reduce using rule 7 (statements)]
    ROMAN      [reduce using rule 10 (statement)]
    ROMAN      [reduce using rule 17 (flow)]
    ROMAN      [reduce using rule 42 (value)]
    STR        [reduce using rule 7 (statements)]
    STR        [reduce using rule 10 (statement)]
    STR        [reduce using rule 17 (flow)]
    STR        [reduce using rule 42 (value)]
    FUNC       [reduce using rule 7 (statements)]
    FUNC       [reduce using rule 10 (statement)]
    FUNC       [reduce using rule 17 (flow)]
    FUNC       [reduce using rule 42 (value)]
    DATA_TYPE  [reduce using rule 7 (statements)]
    DATA_TYPE  [reduce using rule 10 (statement)]
    DATA_TYPE  [reduce using rule 17 (flow)]
    DATA_TYPE  [reduce using rule 42 (value)]
    ID         [reduce using rule 7 (statements)]
    ID         [reduce using rule 10 (statement)]
    ID         [reduce using rule 17 (flow)]
    ID         [reduce using rule 42 (value)]
    ';'        reduce using rule 7 (statements)
    ';'        [reduce using rule 10 (statement)]
    ';'        [reduce using rule 17 (flow)]
    ';'        [reduce using rule 42 (value)]
    '('        [reduce using rule 7 (statements)]
    '('        [reduce using rule 10 (statement)]
    '('        [reduce using rule 17 (flow)]
    '('        [reduce using rule 42 (value)]
    '%'        reduce using rule 7 (statements)
    '%'        [reduce using rule 10 (statement)]
    '%'        [reduce using rule 17 (flow)]
    '%'        [reduce using rule 42 (value)]
    '}'        reduce using rule 7 (statements)
    '}'        [reduce using rule 10 (statement)]
    '}'        [reduce using rule 17 (flow)]
    '}'        [reduce using rule 42 (value)]
    $default   reduce using rule 7 (statements)

    statements  go to state 115
    statement   go to state 18
    flow        go to state 19
    declare     go to state 20
    assignment  go to state 21
    whether     go to state 22
    when        go to state 23
    from        go to state 24
    shift       go to state 25
    expression  go to state 26
    value       go to state 27
    return      go to state 28
    funcall     go to state 29


State 112

   30 shift: SHIFT '(' expression ')' '%' EVENT '(' condition ')' • ASSIGN expression '%'

    ASSIGN  shift, and go to state 116


State 113

   53 ufunction: DEFINE ID '(' symlist ')' '{' statements '}' •

    $default  reduce using rule 53 (ufunction)


State 114

   29 from: FROM expression TO expression ';' STEP expression '%' statements '%' •

    $default  reduce using rule 29 (from)


State 115

   27 whether: WHETHER '(' condition ')' THEN ':' statements OTHERWISE ':' statements •

    $default  reduce using rule 27 (whether)


State 116

   30 shift: SHIFT '(' expression ')' '%' EVENT '(' condition ')' ASSIGN • expression '%'

    MINUS   shift, and go to state 6
    ABS     shift, and go to state 7
    NUM     shift, and go to state 8
    BINARY  shift, and go to state 9
    ROMAN   shift, and go to state 10
    STR     shift, and go to state 11
    ID      shift, and go to state 30
    '('     shift, and go to state 15

    MINUS     [reduce using rule 42 (value)]
    $default  reduce using rule 42 (value)

    expression  go to state 117
    value       go to state 27


State 117

   30 shift: SHIFT '(' expression ')' '%' EVENT '(' condition ')' ASSIGN expression • '%'
   33 expression: expression • PLUS expression
   34           | expression • MINUS expression
   35           | expression • MUL expression
   36           | expression • DIV expression
   37           | expression • POW expression

    PLUS   shift, and go to state 51
    MINUS  shift, and go to state 52
    MUL    shift, and go to state 53
    DIV    shift, and go to state 54
    POW    shift, and go to state 55
    '%'    shift, and go to state 118


State 118

   30 shift: SHIFT '(' expression ')' '%' EVENT '(' condition ')' ASSIGN expression '%' •

    $default  reduce using rule 30 (shift)

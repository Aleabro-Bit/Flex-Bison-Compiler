State 1 conflicts: 1 shift/reduce
State 7 conflicts: 1 shift/reduce
State 10 conflicts: 2 shift/reduce
State 11 conflicts: 2 shift/reduce
State 19 conflicts: 2 shift/reduce
State 20 conflicts: 1 shift/reduce
State 23 conflicts: 1 shift/reduce
State 34 conflicts: 1 reduce/reduce
State 37 conflicts: 1 shift/reduce
State 38 conflicts: 1 shift/reduce
State 39 conflicts: 1 shift/reduce
State 46 conflicts: 1 shift/reduce
State 48 conflicts: 1 shift/reduce
State 49 conflicts: 1 shift/reduce
State 55 conflicts: 1 shift/reduce
State 57 conflicts: 2 shift/reduce
State 58 conflicts: 2 shift/reduce
State 59 conflicts: 2 shift/reduce
State 60 conflicts: 2 shift/reduce
State 61 conflicts: 2 shift/reduce
State 64 conflicts: 1 shift/reduce
State 65 conflicts: 1 shift/reduce
State 74 conflicts: 1 shift/reduce
State 78 conflicts: 1 shift/reduce
State 87 conflicts: 1 shift/reduce
State 88 conflicts: 2 shift/reduce
State 90 conflicts: 1 shift/reduce
State 91 conflicts: 1 shift/reduce
State 92 conflicts: 1 shift/reduce
State 94 conflicts: 1 shift/reduce
State 106 conflicts: 2 shift/reduce
State 107 conflicts: 2 shift/reduce
State 108 conflicts: 1 shift/reduce
State 113 conflicts: 1 shift/reduce
State 115 conflicts: 1 shift/reduce
State 117 conflicts: 1 shift/reduce
State 121 conflicts: 1 shift/reduce
State 125 conflicts: 1 shift/reduce
State 132 conflicts: 1 shift/reduce
State 138 conflicts: 1 shift/reduce


Grammar

    0 $accept: START $end

    1 START: ε
    2      | START stmts EOL
    3      | START ufunction EOL
    4      | START error EOL
    5      | START EOL

    6 stmts: stmt ';' stmts
    7      | stmt ';'
    8      | flow stmts
    9      | flow

   10 stmt: declare
   11     | assignment
   12     | funcall
   13     | return
   14     | expr

   15 flow: whether
   16     | when
   17     | from

   18 declare: DATA_TYPE ID init

   19 init: ASSIGN expr
   20     | ε

   21 assignment: ID ASSIGN expr

   22 whether: WHETHER '[' condition ']' THEN ':' '{' stmts '}'
   23        | WHETHER '[' condition ']' THEN ':' '{' stmts '}' OTHERWISE ':' '{' stmts '}'

   24 when: WHEN '[' condition ']' '{' stmts '}'
   25     | WHEN '{' stmts '}' UNTIL '[' condition ']'

   26 from: FROM '[' declare TO expr STEP expr ']' '{' stmts '}'

   27 condition: expr CMP expr
   28          | condition AND condition
   29          | condition OR condition
   30          | NOT condition
   31          | '(' condition ')'
   32          | expr

   33 expr: expr PLUS expr
   34     | expr MINUS expr
   35     | expr MUL expr
   36     | expr DIV expr
   37     | expr POW expr
   38     | ABS expr ABS
   39     | MINUS expr
   40     | '(' expr ')'
   41     | value
   42     | funcall

   43 value: ε
   44      | NUM
   45      | BINARY
   46      | ROMAN
   47      | ID
   48      | STR
   49      | list

   50 list: '[' ']'
   51     | '[' explist ']'

   52 explist: expr
   53        | expr ',' explist

   54 symlist: ID
   55        | ID ',' symlist

   56 return: RETURN expr ';'

   57 ufunction: DEFINE ID '(' symlist ')' '{' stmts '}'
   58          | DEFINE ID '(' ')' '{' stmts '}'

   59 funcall: ID '(' explist ')'
   60        | FUNC '(' explist ')'


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 31 40 57 58 59 60
    ')' (41) 31 40 57 58 59 60
    ',' (44) 53 55
    ':' (58) 22 23
    ';' (59) 6 7 56
    '[' (91) 22 23 24 25 26 50 51
    ']' (93) 22 23 24 25 26 50 51
    '{' (123) 22 23 24 25 26 57 58
    '}' (125) 22 23 24 25 26 57 58
    error (256) 4
    STEP (258) 26
    TO (259) 26
    FROM (260) 26
    WHEN (261) 24 25
    OTHERWISE (262) 23
    WHETHER (263) 22 23
    RETURN (264) 56
    DEFINE (265) 57 58
    UNTIL (266) 25
    EOL (267) 2 3 4 5
    THEN (268) 22 23
    AND (269) 28
    OR (270) 29
    NOT (271) 30
    PLUS <op> (272) 33
    MINUS <op> (273) 34 39
    MUL <op> (274) 35
    DIV <op> (275) 36
    POW <op> (276) 37
    ASSIGN <op> (277) 19 21
    ABS <op> (278) 38
    NUM <num> (279) 44
    BINARY <num> (280) 45
    ROMAN <num> (281) 46
    STR <st> (282) 48
    FUNC <fn> (283) 60
    DATA_TYPE <dt> (284) 18
    ID <s> (285) 18 21 47 54 55 57 58 59
    CMP <fn> (286) 27
    UMINUS (287)


Nonterminals, with rules where they appear

    $accept (42)
        on left: 0
    START <a> (43)
        on left: 1 2 3 4 5
        on right: 0 2 3 4 5
    stmts <a> (44)
        on left: 6 7 8 9
        on right: 2 6 8 22 23 24 25 26 57 58
    stmt <a> (45)
        on left: 10 11 12 13 14
        on right: 6 7
    flow <a> (46)
        on left: 15 16 17
        on right: 8 9
    declare <a> (47)
        on left: 18
        on right: 10 26
    init <a> (48)
        on left: 19 20
        on right: 18
    assignment <a> (49)
        on left: 21
        on right: 11
    whether <a> (50)
        on left: 22 23
        on right: 15
    when <a> (51)
        on left: 24 25
        on right: 16
    from <a> (52)
        on left: 26
        on right: 17
    condition <a> (53)
        on left: 27 28 29 30 31 32
        on right: 22 23 24 25 28 29 30 31
    expr <a> (54)
        on left: 33 34 35 36 37 38 39 40 41 42
        on right: 14 19 21 26 27 32 33 34 35 36 37 38 39 40 52 53 56
    value <a> (55)
        on left: 43 44 45 46 47 48 49
        on right: 41
    list <a> (56)
        on left: 50 51
        on right: 49
    explist <a> (57)
        on left: 52 53
        on right: 51 53 59 60
    symlist <sl> (58)
        on left: 54 55
        on right: 55 57
    return <a> (59)
        on left: 56
        on right: 13
    ufunction <a> (60)
        on left: 57 58
        on right: 3
    funcall <a> (61)
        on left: 59 60
        on right: 12 42


State 0

    0 $accept: • START $end

    $default  reduce using rule 1 (START)

    START  go to state 1


State 1

    0 $accept: START • $end
    2 START: START • stmts EOL
    3      | START • ufunction EOL
    4      | START • error EOL
    5      | START • EOL

    $end       shift, and go to state 2
    error      shift, and go to state 3
    FROM       shift, and go to state 4
    WHEN       shift, and go to state 5
    WHETHER    shift, and go to state 6
    RETURN     shift, and go to state 7
    DEFINE     shift, and go to state 8
    EOL        shift, and go to state 9
    MINUS      shift, and go to state 10
    ABS        shift, and go to state 11
    NUM        shift, and go to state 12
    BINARY     shift, and go to state 13
    ROMAN      shift, and go to state 14
    STR        shift, and go to state 15
    FUNC       shift, and go to state 16
    DATA_TYPE  shift, and go to state 17
    ID         shift, and go to state 18
    '['        shift, and go to state 19
    '('        shift, and go to state 20

    PLUS   reduce using rule 43 (value)
    MINUS  [reduce using rule 43 (value)]
    MUL    reduce using rule 43 (value)
    DIV    reduce using rule 43 (value)
    POW    reduce using rule 43 (value)
    ';'    reduce using rule 43 (value)

    stmts       go to state 21
    stmt        go to state 22
    flow        go to state 23
    declare     go to state 24
    assignment  go to state 25
    whether     go to state 26
    when        go to state 27
    from        go to state 28
    expr        go to state 29
    value       go to state 30
    list        go to state 31
    return      go to state 32
    ufunction   go to state 33
    funcall     go to state 34


State 2

    0 $accept: START $end •

    $default  accept


State 3

    4 START: START error • EOL

    EOL  shift, and go to state 35


State 4

   26 from: FROM • '[' declare TO expr STEP expr ']' '{' stmts '}'

    '['  shift, and go to state 36


State 5

   24 when: WHEN • '[' condition ']' '{' stmts '}'
   25     | WHEN • '{' stmts '}' UNTIL '[' condition ']'

    '['  shift, and go to state 37
    '{'  shift, and go to state 38


State 6

   22 whether: WHETHER • '[' condition ']' THEN ':' '{' stmts '}'
   23        | WHETHER • '[' condition ']' THEN ':' '{' stmts '}' OTHERWISE ':' '{' stmts '}'

    '['  shift, and go to state 39


State 7

   56 return: RETURN • expr ';'

    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 40
    '['     shift, and go to state 19
    '('     shift, and go to state 20

    MINUS     [reduce using rule 43 (value)]
    $default  reduce using rule 43 (value)

    expr     go to state 41
    value    go to state 30
    list     go to state 31
    funcall  go to state 42


State 8

   57 ufunction: DEFINE • ID '(' symlist ')' '{' stmts '}'
   58          | DEFINE • ID '(' ')' '{' stmts '}'

    ID  shift, and go to state 43


State 9

    5 START: START EOL •

    $default  reduce using rule 5 (START)


State 10

   39 expr: MINUS • expr

    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 40
    '['     shift, and go to state 19
    '('     shift, and go to state 20

    MINUS     [reduce using rule 43 (value)]
    ABS       [reduce using rule 43 (value)]
    $default  reduce using rule 43 (value)

    expr     go to state 44
    value    go to state 30
    list     go to state 31
    funcall  go to state 42


State 11

   38 expr: ABS • expr ABS

    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 40
    '['     shift, and go to state 19
    '('     shift, and go to state 20

    MINUS     [reduce using rule 43 (value)]
    ABS       [reduce using rule 43 (value)]
    $default  reduce using rule 43 (value)

    expr     go to state 45
    value    go to state 30
    list     go to state 31
    funcall  go to state 42


State 12

   44 value: NUM •

    $default  reduce using rule 44 (value)


State 13

   45 value: BINARY •

    $default  reduce using rule 45 (value)


State 14

   46 value: ROMAN •

    $default  reduce using rule 46 (value)


State 15

   48 value: STR •

    $default  reduce using rule 48 (value)


State 16

   60 funcall: FUNC • '(' explist ')'

    '('  shift, and go to state 46


State 17

   18 declare: DATA_TYPE • ID init

    ID  shift, and go to state 47


State 18

   21 assignment: ID • ASSIGN expr
   47 value: ID •
   59 funcall: ID • '(' explist ')'

    ASSIGN  shift, and go to state 48
    '('     shift, and go to state 49

    $default  reduce using rule 47 (value)


State 19

   50 list: '[' • ']'
   51     | '[' • explist ']'

    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 40
    '['     shift, and go to state 19
    ']'     shift, and go to state 50
    '('     shift, and go to state 20

    MINUS     [reduce using rule 43 (value)]
    ']'       [reduce using rule 43 (value)]
    $default  reduce using rule 43 (value)

    expr     go to state 51
    value    go to state 30
    list     go to state 31
    explist  go to state 52
    funcall  go to state 42


State 20

   40 expr: '(' • expr ')'

    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 40
    '['     shift, and go to state 19
    '('     shift, and go to state 20

    MINUS     [reduce using rule 43 (value)]
    $default  reduce using rule 43 (value)

    expr     go to state 53
    value    go to state 30
    list     go to state 31
    funcall  go to state 42


State 21

    2 START: START stmts • EOL

    EOL  shift, and go to state 54


State 22

    6 stmts: stmt • ';' stmts
    7      | stmt • ';'

    ';'  shift, and go to state 55


State 23

    8 stmts: flow • stmts
    9      | flow •

    FROM       shift, and go to state 4
    WHEN       shift, and go to state 5
    WHETHER    shift, and go to state 6
    RETURN     shift, and go to state 7
    MINUS      shift, and go to state 10
    ABS        shift, and go to state 11
    NUM        shift, and go to state 12
    BINARY     shift, and go to state 13
    ROMAN      shift, and go to state 14
    STR        shift, and go to state 15
    FUNC       shift, and go to state 16
    DATA_TYPE  shift, and go to state 17
    ID         shift, and go to state 18
    '['        shift, and go to state 19
    '('        shift, and go to state 20

    EOL       reduce using rule 9 (stmts)
    MINUS     [reduce using rule 43 (value)]
    '}'       reduce using rule 9 (stmts)
    $default  reduce using rule 43 (value)

    stmts       go to state 56
    stmt        go to state 22
    flow        go to state 23
    declare     go to state 24
    assignment  go to state 25
    whether     go to state 26
    when        go to state 27
    from        go to state 28
    expr        go to state 29
    value       go to state 30
    list        go to state 31
    return      go to state 32
    funcall     go to state 34


State 24

   10 stmt: declare •

    $default  reduce using rule 10 (stmt)


State 25

   11 stmt: assignment •

    $default  reduce using rule 11 (stmt)


State 26

   15 flow: whether •

    $default  reduce using rule 15 (flow)


State 27

   16 flow: when •

    $default  reduce using rule 16 (flow)


State 28

   17 flow: from •

    $default  reduce using rule 17 (flow)


State 29

   14 stmt: expr •
   33 expr: expr • PLUS expr
   34     | expr • MINUS expr
   35     | expr • MUL expr
   36     | expr • DIV expr
   37     | expr • POW expr

    PLUS   shift, and go to state 57
    MINUS  shift, and go to state 58
    MUL    shift, and go to state 59
    DIV    shift, and go to state 60
    POW    shift, and go to state 61

    $default  reduce using rule 14 (stmt)


State 30

   41 expr: value •

    $default  reduce using rule 41 (expr)


State 31

   49 value: list •

    $default  reduce using rule 49 (value)


State 32

   13 stmt: return •

    $default  reduce using rule 13 (stmt)


State 33

    3 START: START ufunction • EOL

    EOL  shift, and go to state 62


State 34

   12 stmt: funcall •
   42 expr: funcall •

    ';'       reduce using rule 12 (stmt)
    ';'       [reduce using rule 42 (expr)]
    $default  reduce using rule 42 (expr)


State 35

    4 START: START error EOL •

    $default  reduce using rule 4 (START)


State 36

   26 from: FROM '[' • declare TO expr STEP expr ']' '{' stmts '}'

    DATA_TYPE  shift, and go to state 17

    declare  go to state 63


State 37

   24 when: WHEN '[' • condition ']' '{' stmts '}'

    NOT     shift, and go to state 64
    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 40
    '['     shift, and go to state 19
    '('     shift, and go to state 65

    MINUS     [reduce using rule 43 (value)]
    $default  reduce using rule 43 (value)

    condition  go to state 66
    expr       go to state 67
    value      go to state 30
    list       go to state 31
    funcall    go to state 42


State 38

   25 when: WHEN '{' • stmts '}' UNTIL '[' condition ']'

    FROM       shift, and go to state 4
    WHEN       shift, and go to state 5
    WHETHER    shift, and go to state 6
    RETURN     shift, and go to state 7
    MINUS      shift, and go to state 10
    ABS        shift, and go to state 11
    NUM        shift, and go to state 12
    BINARY     shift, and go to state 13
    ROMAN      shift, and go to state 14
    STR        shift, and go to state 15
    FUNC       shift, and go to state 16
    DATA_TYPE  shift, and go to state 17
    ID         shift, and go to state 18
    '['        shift, and go to state 19
    '('        shift, and go to state 20

    MINUS     [reduce using rule 43 (value)]
    $default  reduce using rule 43 (value)

    stmts       go to state 68
    stmt        go to state 22
    flow        go to state 23
    declare     go to state 24
    assignment  go to state 25
    whether     go to state 26
    when        go to state 27
    from        go to state 28
    expr        go to state 29
    value       go to state 30
    list        go to state 31
    return      go to state 32
    funcall     go to state 34


State 39

   22 whether: WHETHER '[' • condition ']' THEN ':' '{' stmts '}'
   23        | WHETHER '[' • condition ']' THEN ':' '{' stmts '}' OTHERWISE ':' '{' stmts '}'

    NOT     shift, and go to state 64
    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 40
    '['     shift, and go to state 19
    '('     shift, and go to state 65

    MINUS     [reduce using rule 43 (value)]
    $default  reduce using rule 43 (value)

    condition  go to state 69
    expr       go to state 67
    value      go to state 30
    list       go to state 31
    funcall    go to state 42


State 40

   47 value: ID •
   59 funcall: ID • '(' explist ')'

    '('  shift, and go to state 49

    $default  reduce using rule 47 (value)


State 41

   33 expr: expr • PLUS expr
   34     | expr • MINUS expr
   35     | expr • MUL expr
   36     | expr • DIV expr
   37     | expr • POW expr
   56 return: RETURN expr • ';'

    PLUS   shift, and go to state 57
    MINUS  shift, and go to state 58
    MUL    shift, and go to state 59
    DIV    shift, and go to state 60
    POW    shift, and go to state 61
    ';'    shift, and go to state 70


State 42

   42 expr: funcall •

    $default  reduce using rule 42 (expr)


State 43

   57 ufunction: DEFINE ID • '(' symlist ')' '{' stmts '}'
   58          | DEFINE ID • '(' ')' '{' stmts '}'

    '('  shift, and go to state 71


State 44

   33 expr: expr • PLUS expr
   34     | expr • MINUS expr
   35     | expr • MUL expr
   36     | expr • DIV expr
   37     | expr • POW expr
   39     | MINUS expr •

    $default  reduce using rule 39 (expr)


State 45

   33 expr: expr • PLUS expr
   34     | expr • MINUS expr
   35     | expr • MUL expr
   36     | expr • DIV expr
   37     | expr • POW expr
   38     | ABS expr • ABS

    PLUS   shift, and go to state 57
    MINUS  shift, and go to state 58
    MUL    shift, and go to state 59
    DIV    shift, and go to state 60
    POW    shift, and go to state 61
    ABS    shift, and go to state 72


State 46

   60 funcall: FUNC '(' • explist ')'

    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 40
    '['     shift, and go to state 19
    '('     shift, and go to state 20

    MINUS     [reduce using rule 43 (value)]
    $default  reduce using rule 43 (value)

    expr     go to state 51
    value    go to state 30
    list     go to state 31
    explist  go to state 73
    funcall  go to state 42


State 47

   18 declare: DATA_TYPE ID • init

    ASSIGN  shift, and go to state 74

    $default  reduce using rule 20 (init)

    init  go to state 75


State 48

   21 assignment: ID ASSIGN • expr

    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 40
    '['     shift, and go to state 19
    '('     shift, and go to state 20

    MINUS     [reduce using rule 43 (value)]
    $default  reduce using rule 43 (value)

    expr     go to state 76
    value    go to state 30
    list     go to state 31
    funcall  go to state 42


State 49

   59 funcall: ID '(' • explist ')'

    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 40
    '['     shift, and go to state 19
    '('     shift, and go to state 20

    MINUS     [reduce using rule 43 (value)]
    $default  reduce using rule 43 (value)

    expr     go to state 51
    value    go to state 30
    list     go to state 31
    explist  go to state 77
    funcall  go to state 42


State 50

   50 list: '[' ']' •

    $default  reduce using rule 50 (list)


State 51

   33 expr: expr • PLUS expr
   34     | expr • MINUS expr
   35     | expr • MUL expr
   36     | expr • DIV expr
   37     | expr • POW expr
   52 explist: expr •
   53        | expr • ',' explist

    PLUS   shift, and go to state 57
    MINUS  shift, and go to state 58
    MUL    shift, and go to state 59
    DIV    shift, and go to state 60
    POW    shift, and go to state 61
    ','    shift, and go to state 78

    $default  reduce using rule 52 (explist)


State 52

   51 list: '[' explist • ']'

    ']'  shift, and go to state 79


State 53

   33 expr: expr • PLUS expr
   34     | expr • MINUS expr
   35     | expr • MUL expr
   36     | expr • DIV expr
   37     | expr • POW expr
   40     | '(' expr • ')'

    PLUS   shift, and go to state 57
    MINUS  shift, and go to state 58
    MUL    shift, and go to state 59
    DIV    shift, and go to state 60
    POW    shift, and go to state 61
    ')'    shift, and go to state 80


State 54

    2 START: START stmts EOL •

    $default  reduce using rule 2 (START)


State 55

    6 stmts: stmt ';' • stmts
    7      | stmt ';' •

    FROM       shift, and go to state 4
    WHEN       shift, and go to state 5
    WHETHER    shift, and go to state 6
    RETURN     shift, and go to state 7
    MINUS      shift, and go to state 10
    ABS        shift, and go to state 11
    NUM        shift, and go to state 12
    BINARY     shift, and go to state 13
    ROMAN      shift, and go to state 14
    STR        shift, and go to state 15
    FUNC       shift, and go to state 16
    DATA_TYPE  shift, and go to state 17
    ID         shift, and go to state 18
    '['        shift, and go to state 19
    '('        shift, and go to state 20

    EOL       reduce using rule 7 (stmts)
    MINUS     [reduce using rule 43 (value)]
    '}'       reduce using rule 7 (stmts)
    $default  reduce using rule 43 (value)

    stmts       go to state 81
    stmt        go to state 22
    flow        go to state 23
    declare     go to state 24
    assignment  go to state 25
    whether     go to state 26
    when        go to state 27
    from        go to state 28
    expr        go to state 29
    value       go to state 30
    list        go to state 31
    return      go to state 32
    funcall     go to state 34


State 56

    8 stmts: flow stmts •

    $default  reduce using rule 8 (stmts)


State 57

   33 expr: expr PLUS • expr

    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 40
    '['     shift, and go to state 19
    '('     shift, and go to state 20

    MINUS     [reduce using rule 43 (value)]
    ABS       [reduce using rule 43 (value)]
    $default  reduce using rule 43 (value)

    expr     go to state 82
    value    go to state 30
    list     go to state 31
    funcall  go to state 42


State 58

   34 expr: expr MINUS • expr

    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 40
    '['     shift, and go to state 19
    '('     shift, and go to state 20

    MINUS     [reduce using rule 43 (value)]
    ABS       [reduce using rule 43 (value)]
    $default  reduce using rule 43 (value)

    expr     go to state 83
    value    go to state 30
    list     go to state 31
    funcall  go to state 42


State 59

   35 expr: expr MUL • expr

    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 40
    '['     shift, and go to state 19
    '('     shift, and go to state 20

    MINUS     [reduce using rule 43 (value)]
    ABS       [reduce using rule 43 (value)]
    $default  reduce using rule 43 (value)

    expr     go to state 84
    value    go to state 30
    list     go to state 31
    funcall  go to state 42


State 60

   36 expr: expr DIV • expr

    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 40
    '['     shift, and go to state 19
    '('     shift, and go to state 20

    MINUS     [reduce using rule 43 (value)]
    ABS       [reduce using rule 43 (value)]
    $default  reduce using rule 43 (value)

    expr     go to state 85
    value    go to state 30
    list     go to state 31
    funcall  go to state 42


State 61

   37 expr: expr POW • expr

    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 40
    '['     shift, and go to state 19
    '('     shift, and go to state 20

    MINUS     [reduce using rule 43 (value)]
    ABS       [reduce using rule 43 (value)]
    $default  reduce using rule 43 (value)

    expr     go to state 86
    value    go to state 30
    list     go to state 31
    funcall  go to state 42


State 62

    3 START: START ufunction EOL •

    $default  reduce using rule 3 (START)


State 63

   26 from: FROM '[' declare • TO expr STEP expr ']' '{' stmts '}'

    TO  shift, and go to state 87


State 64

   30 condition: NOT • condition

    NOT     shift, and go to state 64
    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 40
    '['     shift, and go to state 19
    '('     shift, and go to state 65

    MINUS     [reduce using rule 43 (value)]
    $default  reduce using rule 43 (value)

    condition  go to state 88
    expr       go to state 67
    value      go to state 30
    list       go to state 31
    funcall    go to state 42


State 65

   31 condition: '(' • condition ')'
   40 expr: '(' • expr ')'

    NOT     shift, and go to state 64
    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 40
    '['     shift, and go to state 19
    '('     shift, and go to state 65

    MINUS     [reduce using rule 43 (value)]
    $default  reduce using rule 43 (value)

    condition  go to state 89
    expr       go to state 90
    value      go to state 30
    list       go to state 31
    funcall    go to state 42


State 66

   24 when: WHEN '[' condition • ']' '{' stmts '}'
   28 condition: condition • AND condition
   29          | condition • OR condition

    AND  shift, and go to state 91
    OR   shift, and go to state 92
    ']'  shift, and go to state 93


State 67

   27 condition: expr • CMP expr
   32          | expr •
   33 expr: expr • PLUS expr
   34     | expr • MINUS expr
   35     | expr • MUL expr
   36     | expr • DIV expr
   37     | expr • POW expr

    PLUS   shift, and go to state 57
    MINUS  shift, and go to state 58
    MUL    shift, and go to state 59
    DIV    shift, and go to state 60
    POW    shift, and go to state 61
    CMP    shift, and go to state 94

    $default  reduce using rule 32 (condition)


State 68

   25 when: WHEN '{' stmts • '}' UNTIL '[' condition ']'

    '}'  shift, and go to state 95


State 69

   22 whether: WHETHER '[' condition • ']' THEN ':' '{' stmts '}'
   23        | WHETHER '[' condition • ']' THEN ':' '{' stmts '}' OTHERWISE ':' '{' stmts '}'
   28 condition: condition • AND condition
   29          | condition • OR condition

    AND  shift, and go to state 91
    OR   shift, and go to state 92
    ']'  shift, and go to state 96


State 70

   56 return: RETURN expr ';' •

    $default  reduce using rule 56 (return)


State 71

   57 ufunction: DEFINE ID '(' • symlist ')' '{' stmts '}'
   58          | DEFINE ID '(' • ')' '{' stmts '}'

    ID   shift, and go to state 97
    ')'  shift, and go to state 98

    symlist  go to state 99


State 72

   38 expr: ABS expr ABS •

    $default  reduce using rule 38 (expr)


State 73

   60 funcall: FUNC '(' explist • ')'

    ')'  shift, and go to state 100


State 74

   19 init: ASSIGN • expr

    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 40
    '['     shift, and go to state 19
    '('     shift, and go to state 20

    MINUS     [reduce using rule 43 (value)]
    $default  reduce using rule 43 (value)

    expr     go to state 101
    value    go to state 30
    list     go to state 31
    funcall  go to state 42


State 75

   18 declare: DATA_TYPE ID init •

    $default  reduce using rule 18 (declare)


State 76

   21 assignment: ID ASSIGN expr •
   33 expr: expr • PLUS expr
   34     | expr • MINUS expr
   35     | expr • MUL expr
   36     | expr • DIV expr
   37     | expr • POW expr

    PLUS   shift, and go to state 57
    MINUS  shift, and go to state 58
    MUL    shift, and go to state 59
    DIV    shift, and go to state 60
    POW    shift, and go to state 61

    $default  reduce using rule 21 (assignment)


State 77

   59 funcall: ID '(' explist • ')'

    ')'  shift, and go to state 102


State 78

   53 explist: expr ',' • explist

    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 40
    '['     shift, and go to state 19
    '('     shift, and go to state 20

    MINUS     [reduce using rule 43 (value)]
    $default  reduce using rule 43 (value)

    expr     go to state 51
    value    go to state 30
    list     go to state 31
    explist  go to state 103
    funcall  go to state 42


State 79

   51 list: '[' explist ']' •

    $default  reduce using rule 51 (list)


State 80

   40 expr: '(' expr ')' •

    $default  reduce using rule 40 (expr)


State 81

    6 stmts: stmt ';' stmts •

    $default  reduce using rule 6 (stmts)


State 82

   33 expr: expr • PLUS expr
   33     | expr PLUS expr •
   34     | expr • MINUS expr
   35     | expr • MUL expr
   36     | expr • DIV expr
   37     | expr • POW expr

    MUL  shift, and go to state 59
    DIV  shift, and go to state 60

    $default  reduce using rule 33 (expr)


State 83

   33 expr: expr • PLUS expr
   34     | expr • MINUS expr
   34     | expr MINUS expr •
   35     | expr • MUL expr
   36     | expr • DIV expr
   37     | expr • POW expr

    MUL  shift, and go to state 59
    DIV  shift, and go to state 60

    $default  reduce using rule 34 (expr)


State 84

   33 expr: expr • PLUS expr
   34     | expr • MINUS expr
   35     | expr • MUL expr
   35     | expr MUL expr •
   36     | expr • DIV expr
   37     | expr • POW expr

    $default  reduce using rule 35 (expr)


State 85

   33 expr: expr • PLUS expr
   34     | expr • MINUS expr
   35     | expr • MUL expr
   36     | expr • DIV expr
   36     | expr DIV expr •
   37     | expr • POW expr

    $default  reduce using rule 36 (expr)


State 86

   33 expr: expr • PLUS expr
   34     | expr • MINUS expr
   35     | expr • MUL expr
   36     | expr • DIV expr
   37     | expr • POW expr
   37     | expr POW expr •

    MUL  shift, and go to state 59
    DIV  shift, and go to state 60

    $default  reduce using rule 37 (expr)


State 87

   26 from: FROM '[' declare TO • expr STEP expr ']' '{' stmts '}'

    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 40
    '['     shift, and go to state 19
    '('     shift, and go to state 20

    MINUS     [reduce using rule 43 (value)]
    $default  reduce using rule 43 (value)

    expr     go to state 104
    value    go to state 30
    list     go to state 31
    funcall  go to state 42


State 88

   28 condition: condition • AND condition
   29          | condition • OR condition
   30          | NOT condition •

    AND  shift, and go to state 91
    OR   shift, and go to state 92

    AND       [reduce using rule 30 (condition)]
    OR        [reduce using rule 30 (condition)]
    $default  reduce using rule 30 (condition)


State 89

   28 condition: condition • AND condition
   29          | condition • OR condition
   31          | '(' condition • ')'

    AND  shift, and go to state 91
    OR   shift, and go to state 92
    ')'  shift, and go to state 105


State 90

   27 condition: expr • CMP expr
   32          | expr •
   33 expr: expr • PLUS expr
   34     | expr • MINUS expr
   35     | expr • MUL expr
   36     | expr • DIV expr
   37     | expr • POW expr
   40     | '(' expr • ')'

    PLUS   shift, and go to state 57
    MINUS  shift, and go to state 58
    MUL    shift, and go to state 59
    DIV    shift, and go to state 60
    POW    shift, and go to state 61
    CMP    shift, and go to state 94
    ')'    shift, and go to state 80

    ')'       [reduce using rule 32 (condition)]
    $default  reduce using rule 32 (condition)


State 91

   28 condition: condition AND • condition

    NOT     shift, and go to state 64
    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 40
    '['     shift, and go to state 19
    '('     shift, and go to state 65

    MINUS     [reduce using rule 43 (value)]
    $default  reduce using rule 43 (value)

    condition  go to state 106
    expr       go to state 67
    value      go to state 30
    list       go to state 31
    funcall    go to state 42


State 92

   29 condition: condition OR • condition

    NOT     shift, and go to state 64
    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 40
    '['     shift, and go to state 19
    '('     shift, and go to state 65

    MINUS     [reduce using rule 43 (value)]
    $default  reduce using rule 43 (value)

    condition  go to state 107
    expr       go to state 67
    value      go to state 30
    list       go to state 31
    funcall    go to state 42


State 93

   24 when: WHEN '[' condition ']' • '{' stmts '}'

    '{'  shift, and go to state 108


State 94

   27 condition: expr CMP • expr

    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 40
    '['     shift, and go to state 19
    '('     shift, and go to state 20

    MINUS     [reduce using rule 43 (value)]
    $default  reduce using rule 43 (value)

    expr     go to state 109
    value    go to state 30
    list     go to state 31
    funcall  go to state 42


State 95

   25 when: WHEN '{' stmts '}' • UNTIL '[' condition ']'

    UNTIL  shift, and go to state 110


State 96

   22 whether: WHETHER '[' condition ']' • THEN ':' '{' stmts '}'
   23        | WHETHER '[' condition ']' • THEN ':' '{' stmts '}' OTHERWISE ':' '{' stmts '}'

    THEN  shift, and go to state 111


State 97

   54 symlist: ID •
   55        | ID • ',' symlist

    ','  shift, and go to state 112

    $default  reduce using rule 54 (symlist)


State 98

   58 ufunction: DEFINE ID '(' ')' • '{' stmts '}'

    '{'  shift, and go to state 113


State 99

   57 ufunction: DEFINE ID '(' symlist • ')' '{' stmts '}'

    ')'  shift, and go to state 114


State 100

   60 funcall: FUNC '(' explist ')' •

    $default  reduce using rule 60 (funcall)


State 101

   19 init: ASSIGN expr •
   33 expr: expr • PLUS expr
   34     | expr • MINUS expr
   35     | expr • MUL expr
   36     | expr • DIV expr
   37     | expr • POW expr

    PLUS   shift, and go to state 57
    MINUS  shift, and go to state 58
    MUL    shift, and go to state 59
    DIV    shift, and go to state 60
    POW    shift, and go to state 61

    $default  reduce using rule 19 (init)


State 102

   59 funcall: ID '(' explist ')' •

    $default  reduce using rule 59 (funcall)


State 103

   53 explist: expr ',' explist •

    $default  reduce using rule 53 (explist)


State 104

   26 from: FROM '[' declare TO expr • STEP expr ']' '{' stmts '}'
   33 expr: expr • PLUS expr
   34     | expr • MINUS expr
   35     | expr • MUL expr
   36     | expr • DIV expr
   37     | expr • POW expr

    STEP   shift, and go to state 115
    PLUS   shift, and go to state 57
    MINUS  shift, and go to state 58
    MUL    shift, and go to state 59
    DIV    shift, and go to state 60
    POW    shift, and go to state 61


State 105

   31 condition: '(' condition ')' •

    $default  reduce using rule 31 (condition)


State 106

   28 condition: condition • AND condition
   28          | condition AND condition •
   29          | condition • OR condition

    AND  shift, and go to state 91
    OR   shift, and go to state 92

    AND       [reduce using rule 28 (condition)]
    OR        [reduce using rule 28 (condition)]
    $default  reduce using rule 28 (condition)


State 107

   28 condition: condition • AND condition
   29          | condition • OR condition
   29          | condition OR condition •

    AND  shift, and go to state 91
    OR   shift, and go to state 92

    AND       [reduce using rule 29 (condition)]
    OR        [reduce using rule 29 (condition)]
    $default  reduce using rule 29 (condition)


State 108

   24 when: WHEN '[' condition ']' '{' • stmts '}'

    FROM       shift, and go to state 4
    WHEN       shift, and go to state 5
    WHETHER    shift, and go to state 6
    RETURN     shift, and go to state 7
    MINUS      shift, and go to state 10
    ABS        shift, and go to state 11
    NUM        shift, and go to state 12
    BINARY     shift, and go to state 13
    ROMAN      shift, and go to state 14
    STR        shift, and go to state 15
    FUNC       shift, and go to state 16
    DATA_TYPE  shift, and go to state 17
    ID         shift, and go to state 18
    '['        shift, and go to state 19
    '('        shift, and go to state 20

    MINUS     [reduce using rule 43 (value)]
    $default  reduce using rule 43 (value)

    stmts       go to state 116
    stmt        go to state 22
    flow        go to state 23
    declare     go to state 24
    assignment  go to state 25
    whether     go to state 26
    when        go to state 27
    from        go to state 28
    expr        go to state 29
    value       go to state 30
    list        go to state 31
    return      go to state 32
    funcall     go to state 34


State 109

   27 condition: expr CMP expr •
   33 expr: expr • PLUS expr
   34     | expr • MINUS expr
   35     | expr • MUL expr
   36     | expr • DIV expr
   37     | expr • POW expr

    PLUS   shift, and go to state 57
    MINUS  shift, and go to state 58
    MUL    shift, and go to state 59
    DIV    shift, and go to state 60
    POW    shift, and go to state 61

    $default  reduce using rule 27 (condition)


State 110

   25 when: WHEN '{' stmts '}' UNTIL • '[' condition ']'

    '['  shift, and go to state 117


State 111

   22 whether: WHETHER '[' condition ']' THEN • ':' '{' stmts '}'
   23        | WHETHER '[' condition ']' THEN • ':' '{' stmts '}' OTHERWISE ':' '{' stmts '}'

    ':'  shift, and go to state 118


State 112

   55 symlist: ID ',' • symlist

    ID  shift, and go to state 97

    symlist  go to state 119


State 113

   58 ufunction: DEFINE ID '(' ')' '{' • stmts '}'

    FROM       shift, and go to state 4
    WHEN       shift, and go to state 5
    WHETHER    shift, and go to state 6
    RETURN     shift, and go to state 7
    MINUS      shift, and go to state 10
    ABS        shift, and go to state 11
    NUM        shift, and go to state 12
    BINARY     shift, and go to state 13
    ROMAN      shift, and go to state 14
    STR        shift, and go to state 15
    FUNC       shift, and go to state 16
    DATA_TYPE  shift, and go to state 17
    ID         shift, and go to state 18
    '['        shift, and go to state 19
    '('        shift, and go to state 20

    MINUS     [reduce using rule 43 (value)]
    $default  reduce using rule 43 (value)

    stmts       go to state 120
    stmt        go to state 22
    flow        go to state 23
    declare     go to state 24
    assignment  go to state 25
    whether     go to state 26
    when        go to state 27
    from        go to state 28
    expr        go to state 29
    value       go to state 30
    list        go to state 31
    return      go to state 32
    funcall     go to state 34


State 114

   57 ufunction: DEFINE ID '(' symlist ')' • '{' stmts '}'

    '{'  shift, and go to state 121


State 115

   26 from: FROM '[' declare TO expr STEP • expr ']' '{' stmts '}'

    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 40
    '['     shift, and go to state 19
    '('     shift, and go to state 20

    MINUS     [reduce using rule 43 (value)]
    $default  reduce using rule 43 (value)

    expr     go to state 122
    value    go to state 30
    list     go to state 31
    funcall  go to state 42


State 116

   24 when: WHEN '[' condition ']' '{' stmts • '}'

    '}'  shift, and go to state 123


State 117

   25 when: WHEN '{' stmts '}' UNTIL '[' • condition ']'

    NOT     shift, and go to state 64
    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 40
    '['     shift, and go to state 19
    '('     shift, and go to state 65

    MINUS     [reduce using rule 43 (value)]
    $default  reduce using rule 43 (value)

    condition  go to state 124
    expr       go to state 67
    value      go to state 30
    list       go to state 31
    funcall    go to state 42


State 118

   22 whether: WHETHER '[' condition ']' THEN ':' • '{' stmts '}'
   23        | WHETHER '[' condition ']' THEN ':' • '{' stmts '}' OTHERWISE ':' '{' stmts '}'

    '{'  shift, and go to state 125


State 119

   55 symlist: ID ',' symlist •

    $default  reduce using rule 55 (symlist)


State 120

   58 ufunction: DEFINE ID '(' ')' '{' stmts • '}'

    '}'  shift, and go to state 126


State 121

   57 ufunction: DEFINE ID '(' symlist ')' '{' • stmts '}'

    FROM       shift, and go to state 4
    WHEN       shift, and go to state 5
    WHETHER    shift, and go to state 6
    RETURN     shift, and go to state 7
    MINUS      shift, and go to state 10
    ABS        shift, and go to state 11
    NUM        shift, and go to state 12
    BINARY     shift, and go to state 13
    ROMAN      shift, and go to state 14
    STR        shift, and go to state 15
    FUNC       shift, and go to state 16
    DATA_TYPE  shift, and go to state 17
    ID         shift, and go to state 18
    '['        shift, and go to state 19
    '('        shift, and go to state 20

    MINUS     [reduce using rule 43 (value)]
    $default  reduce using rule 43 (value)

    stmts       go to state 127
    stmt        go to state 22
    flow        go to state 23
    declare     go to state 24
    assignment  go to state 25
    whether     go to state 26
    when        go to state 27
    from        go to state 28
    expr        go to state 29
    value       go to state 30
    list        go to state 31
    return      go to state 32
    funcall     go to state 34


State 122

   26 from: FROM '[' declare TO expr STEP expr • ']' '{' stmts '}'
   33 expr: expr • PLUS expr
   34     | expr • MINUS expr
   35     | expr • MUL expr
   36     | expr • DIV expr
   37     | expr • POW expr

    PLUS   shift, and go to state 57
    MINUS  shift, and go to state 58
    MUL    shift, and go to state 59
    DIV    shift, and go to state 60
    POW    shift, and go to state 61
    ']'    shift, and go to state 128


State 123

   24 when: WHEN '[' condition ']' '{' stmts '}' •

    $default  reduce using rule 24 (when)


State 124

   25 when: WHEN '{' stmts '}' UNTIL '[' condition • ']'
   28 condition: condition • AND condition
   29          | condition • OR condition

    AND  shift, and go to state 91
    OR   shift, and go to state 92
    ']'  shift, and go to state 129


State 125

   22 whether: WHETHER '[' condition ']' THEN ':' '{' • stmts '}'
   23        | WHETHER '[' condition ']' THEN ':' '{' • stmts '}' OTHERWISE ':' '{' stmts '}'

    FROM       shift, and go to state 4
    WHEN       shift, and go to state 5
    WHETHER    shift, and go to state 6
    RETURN     shift, and go to state 7
    MINUS      shift, and go to state 10
    ABS        shift, and go to state 11
    NUM        shift, and go to state 12
    BINARY     shift, and go to state 13
    ROMAN      shift, and go to state 14
    STR        shift, and go to state 15
    FUNC       shift, and go to state 16
    DATA_TYPE  shift, and go to state 17
    ID         shift, and go to state 18
    '['        shift, and go to state 19
    '('        shift, and go to state 20

    MINUS     [reduce using rule 43 (value)]
    $default  reduce using rule 43 (value)

    stmts       go to state 130
    stmt        go to state 22
    flow        go to state 23
    declare     go to state 24
    assignment  go to state 25
    whether     go to state 26
    when        go to state 27
    from        go to state 28
    expr        go to state 29
    value       go to state 30
    list        go to state 31
    return      go to state 32
    funcall     go to state 34


State 126

   58 ufunction: DEFINE ID '(' ')' '{' stmts '}' •

    $default  reduce using rule 58 (ufunction)


State 127

   57 ufunction: DEFINE ID '(' symlist ')' '{' stmts • '}'

    '}'  shift, and go to state 131


State 128

   26 from: FROM '[' declare TO expr STEP expr ']' • '{' stmts '}'

    '{'  shift, and go to state 132


State 129

   25 when: WHEN '{' stmts '}' UNTIL '[' condition ']' •

    $default  reduce using rule 25 (when)


State 130

   22 whether: WHETHER '[' condition ']' THEN ':' '{' stmts • '}'
   23        | WHETHER '[' condition ']' THEN ':' '{' stmts • '}' OTHERWISE ':' '{' stmts '}'

    '}'  shift, and go to state 133


State 131

   57 ufunction: DEFINE ID '(' symlist ')' '{' stmts '}' •

    $default  reduce using rule 57 (ufunction)


State 132

   26 from: FROM '[' declare TO expr STEP expr ']' '{' • stmts '}'

    FROM       shift, and go to state 4
    WHEN       shift, and go to state 5
    WHETHER    shift, and go to state 6
    RETURN     shift, and go to state 7
    MINUS      shift, and go to state 10
    ABS        shift, and go to state 11
    NUM        shift, and go to state 12
    BINARY     shift, and go to state 13
    ROMAN      shift, and go to state 14
    STR        shift, and go to state 15
    FUNC       shift, and go to state 16
    DATA_TYPE  shift, and go to state 17
    ID         shift, and go to state 18
    '['        shift, and go to state 19
    '('        shift, and go to state 20

    MINUS     [reduce using rule 43 (value)]
    $default  reduce using rule 43 (value)

    stmts       go to state 134
    stmt        go to state 22
    flow        go to state 23
    declare     go to state 24
    assignment  go to state 25
    whether     go to state 26
    when        go to state 27
    from        go to state 28
    expr        go to state 29
    value       go to state 30
    list        go to state 31
    return      go to state 32
    funcall     go to state 34


State 133

   22 whether: WHETHER '[' condition ']' THEN ':' '{' stmts '}' •
   23        | WHETHER '[' condition ']' THEN ':' '{' stmts '}' • OTHERWISE ':' '{' stmts '}'

    OTHERWISE  shift, and go to state 135

    $default  reduce using rule 22 (whether)


State 134

   26 from: FROM '[' declare TO expr STEP expr ']' '{' stmts • '}'

    '}'  shift, and go to state 136


State 135

   23 whether: WHETHER '[' condition ']' THEN ':' '{' stmts '}' OTHERWISE • ':' '{' stmts '}'

    ':'  shift, and go to state 137


State 136

   26 from: FROM '[' declare TO expr STEP expr ']' '{' stmts '}' •

    $default  reduce using rule 26 (from)


State 137

   23 whether: WHETHER '[' condition ']' THEN ':' '{' stmts '}' OTHERWISE ':' • '{' stmts '}'

    '{'  shift, and go to state 138


State 138

   23 whether: WHETHER '[' condition ']' THEN ':' '{' stmts '}' OTHERWISE ':' '{' • stmts '}'

    FROM       shift, and go to state 4
    WHEN       shift, and go to state 5
    WHETHER    shift, and go to state 6
    RETURN     shift, and go to state 7
    MINUS      shift, and go to state 10
    ABS        shift, and go to state 11
    NUM        shift, and go to state 12
    BINARY     shift, and go to state 13
    ROMAN      shift, and go to state 14
    STR        shift, and go to state 15
    FUNC       shift, and go to state 16
    DATA_TYPE  shift, and go to state 17
    ID         shift, and go to state 18
    '['        shift, and go to state 19
    '('        shift, and go to state 20

    MINUS     [reduce using rule 43 (value)]
    $default  reduce using rule 43 (value)

    stmts       go to state 139
    stmt        go to state 22
    flow        go to state 23
    declare     go to state 24
    assignment  go to state 25
    whether     go to state 26
    when        go to state 27
    from        go to state 28
    expr        go to state 29
    value       go to state 30
    list        go to state 31
    return      go to state 32
    funcall     go to state 34


State 139

   23 whether: WHETHER '[' condition ']' THEN ':' '{' stmts '}' OTHERWISE ':' '{' stmts • '}'

    '}'  shift, and go to state 140


State 140

   23 whether: WHETHER '[' condition ']' THEN ':' '{' stmts '}' OTHERWISE ':' '{' stmts '}' •

    $default  reduce using rule 23 (whether)

Terminals unused in grammar

    EOL


State 2 conflicts: 17 shift/reduce, 7 reduce/reduce
State 8 conflicts: 1 shift/reduce
State 10 conflicts: 2 shift/reduce
State 11 conflicts: 2 shift/reduce
State 19 conflicts: 2 shift/reduce
State 20 conflicts: 1 shift/reduce
State 23 conflicts: 15 shift/reduce, 6 reduce/reduce
State 34 conflicts: 1 reduce/reduce
State 36 conflicts: 1 shift/reduce
State 37 conflicts: 1 shift/reduce
State 38 conflicts: 1 shift/reduce
State 45 conflicts: 1 shift/reduce
State 47 conflicts: 1 shift/reduce
State 48 conflicts: 1 shift/reduce
State 53 conflicts: 15 shift/reduce, 6 reduce/reduce
State 55 conflicts: 2 shift/reduce
State 56 conflicts: 2 shift/reduce
State 57 conflicts: 2 shift/reduce
State 58 conflicts: 2 shift/reduce
State 59 conflicts: 2 shift/reduce
State 61 conflicts: 1 shift/reduce
State 62 conflicts: 1 shift/reduce
State 70 conflicts: 1 shift/reduce
State 74 conflicts: 1 shift/reduce
State 83 conflicts: 1 shift/reduce
State 84 conflicts: 2 shift/reduce
State 86 conflicts: 1 shift/reduce
State 87 conflicts: 1 shift/reduce
State 88 conflicts: 1 shift/reduce
State 90 conflicts: 1 shift/reduce
State 102 conflicts: 2 shift/reduce
State 103 conflicts: 2 shift/reduce
State 104 conflicts: 1 shift/reduce
State 109 conflicts: 1 shift/reduce
State 111 conflicts: 1 shift/reduce
State 113 conflicts: 1 shift/reduce
State 117 conflicts: 1 shift/reduce
State 121 conflicts: 1 shift/reduce
State 128 conflicts: 1 shift/reduce
State 134 conflicts: 1 shift/reduce


Grammar

    0 $accept: S $end

    1 S: START

    2 START: ε
    3      | START stmts
    4      | START ufunction
    5      | START error
    6      | START

    7 stmts: stmt ';' stmts
    8      | stmt ';'
    9      | flow stmts
   10      | flow

   11 stmt: declare
   12     | assignment
   13     | funcall
   14     | return
   15     | expr

   16 flow: whether
   17     | when
   18     | from

   19 declare: DATA_TYPE ID init

   20 init: ASSIGN expr
   21     | ε

   22 assignment: ID ASSIGN expr

   23 whether: WHETHER '[' condition ']' THEN ':' '{' stmts '}'
   24        | WHETHER '[' condition ']' THEN ':' '{' stmts '}' OTHERWISE ':' '{' stmts '}'

   25 when: WHEN '[' condition ']' '{' stmts '}'
   26     | WHEN '{' stmts '}' UNTIL '[' condition ']'

   27 from: FROM '[' declare TO expr STEP expr ']' '{' stmts '}'

   28 condition: expr CMP expr
   29          | condition AND condition
   30          | condition OR condition
   31          | NOT condition
   32          | '(' condition ')'
   33          | expr

   34 expr: expr PLUS expr
   35     | expr MINUS expr
   36     | expr MUL expr
   37     | expr DIV expr
   38     | expr POW expr
   39     | ABS expr ABS
   40     | MINUS expr
   41     | '(' expr ')'
   42     | value
   43     | funcall

   44 value: ε
   45      | NUM
   46      | BINARY
   47      | ROMAN
   48      | ID
   49      | STR
   50      | list

   51 list: '[' ']'
   52     | '[' explist ']'

   53 explist: expr
   54        | expr ',' explist

   55 symlist: ID
   56        | ID ',' symlist

   57 return: RETURN expr

   58 ufunction: DEFINE ID '(' symlist ')' '{' stmts '}'
   59          | DEFINE ID '(' ')' '{' stmts '}'

   60 funcall: ID '(' explist ')'
   61        | FUNC '(' explist ')'


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 32 41 58 59 60 61
    ')' (41) 32 41 58 59 60 61
    ',' (44) 54 56
    ':' (58) 23 24
    ';' (59) 7 8
    '[' (91) 23 24 25 26 27 51 52
    ']' (93) 23 24 25 26 27 51 52
    '{' (123) 23 24 25 26 27 58 59
    '}' (125) 23 24 25 26 27 58 59
    error (256) 5
    STEP (258) 27
    TO (259) 27
    FROM (260) 27
    WHEN (261) 25 26
    OTHERWISE (262) 24
    WHETHER (263) 23 24
    RETURN (264) 57
    DEFINE (265) 58 59
    UNTIL (266) 26
    EOL (267)
    THEN (268) 23 24
    AND (269) 29
    OR (270) 30
    NOT (271) 31
    PLUS <op> (272) 34
    MINUS <op> (273) 35 40
    MUL <op> (274) 36
    DIV <op> (275) 37
    POW <op> (276) 38
    ASSIGN <op> (277) 20 22
    ABS <op> (278) 39
    NUM <num> (279) 45
    BINARY <num> (280) 46
    ROMAN <num> (281) 47
    STR <st> (282) 49
    FUNC <fn> (283) 61
    DATA_TYPE <dt> (284) 19
    ID <s> (285) 19 22 48 55 56 58 59 60
    CMP <fn> (286) 28
    UMINUS (287)


Nonterminals, with rules where they appear

    $accept (42)
        on left: 0
    S (43)
        on left: 1
        on right: 0
    START <a> (44)
        on left: 2 3 4 5 6
        on right: 1 3 4 5 6
    stmts <a> (45)
        on left: 7 8 9 10
        on right: 3 7 9 23 24 25 26 27 58 59
    stmt <a> (46)
        on left: 11 12 13 14 15
        on right: 7 8
    flow <a> (47)
        on left: 16 17 18
        on right: 9 10
    declare <a> (48)
        on left: 19
        on right: 11 27
    init <a> (49)
        on left: 20 21
        on right: 19
    assignment <a> (50)
        on left: 22
        on right: 12
    whether <a> (51)
        on left: 23 24
        on right: 16
    when <a> (52)
        on left: 25 26
        on right: 17
    from <a> (53)
        on left: 27
        on right: 18
    condition <a> (54)
        on left: 28 29 30 31 32 33
        on right: 23 24 25 26 29 30 31 32
    expr <a> (55)
        on left: 34 35 36 37 38 39 40 41 42 43
        on right: 15 20 22 27 28 33 34 35 36 37 38 39 40 41 53 54 57
    value <a> (56)
        on left: 44 45 46 47 48 49 50
        on right: 42
    list <a> (57)
        on left: 51 52
        on right: 50
    explist <a> (58)
        on left: 53 54
        on right: 52 54 60 61
    symlist <sl> (59)
        on left: 55 56
        on right: 56 58
    return <a> (60)
        on left: 57
        on right: 14
    ufunction <a> (61)
        on left: 58 59
        on right: 4
    funcall <a> (62)
        on left: 60 61
        on right: 13 43


State 0

    0 $accept: • S $end

    $default  reduce using rule 2 (START)

    S      go to state 1
    START  go to state 2


State 1

    0 $accept: S • $end

    $end  shift, and go to state 3


State 2

    1 S: START •
    3 START: START • stmts
    4      | START • ufunction
    5      | START • error
    6      | START •

    error      shift, and go to state 4
    FROM       shift, and go to state 5
    WHEN       shift, and go to state 6
    WHETHER    shift, and go to state 7
    RETURN     shift, and go to state 8
    DEFINE     shift, and go to state 9
    MINUS      shift, and go to state 10
    ABS        shift, and go to state 11
    NUM        shift, and go to state 12
    BINARY     shift, and go to state 13
    ROMAN      shift, and go to state 14
    STR        shift, and go to state 15
    FUNC       shift, and go to state 16
    DATA_TYPE  shift, and go to state 17
    ID         shift, and go to state 18
    '['        shift, and go to state 19
    '('        shift, and go to state 20

    $end       reduce using rule 1 (S)
    $end       [reduce using rule 6 (START)]
    error      [reduce using rule 6 (START)]
    FROM       [reduce using rule 6 (START)]
    WHEN       [reduce using rule 6 (START)]
    WHETHER    [reduce using rule 6 (START)]
    RETURN     [reduce using rule 6 (START)]
    DEFINE     [reduce using rule 6 (START)]
    PLUS       reduce using rule 6 (START)
    PLUS       [reduce using rule 44 (value)]
    MINUS      [reduce using rule 6 (START)]
    MINUS      [reduce using rule 44 (value)]
    MUL        reduce using rule 6 (START)
    MUL        [reduce using rule 44 (value)]
    DIV        reduce using rule 6 (START)
    DIV        [reduce using rule 44 (value)]
    POW        reduce using rule 6 (START)
    POW        [reduce using rule 44 (value)]
    ABS        [reduce using rule 6 (START)]
    NUM        [reduce using rule 6 (START)]
    BINARY     [reduce using rule 6 (START)]
    ROMAN      [reduce using rule 6 (START)]
    STR        [reduce using rule 6 (START)]
    FUNC       [reduce using rule 6 (START)]
    DATA_TYPE  [reduce using rule 6 (START)]
    ID         [reduce using rule 6 (START)]
    ';'        reduce using rule 6 (START)
    ';'        [reduce using rule 44 (value)]
    '['        [reduce using rule 6 (START)]
    '('        [reduce using rule 6 (START)]

    stmts       go to state 21
    stmt        go to state 22
    flow        go to state 23
    declare     go to state 24
    assignment  go to state 25
    whether     go to state 26
    when        go to state 27
    from        go to state 28
    expr        go to state 29
    value       go to state 30
    list        go to state 31
    return      go to state 32
    ufunction   go to state 33
    funcall     go to state 34


State 3

    0 $accept: S $end •

    $default  accept


State 4

    5 START: START error •

    $default  reduce using rule 5 (START)


State 5

   27 from: FROM • '[' declare TO expr STEP expr ']' '{' stmts '}'

    '['  shift, and go to state 35


State 6

   25 when: WHEN • '[' condition ']' '{' stmts '}'
   26     | WHEN • '{' stmts '}' UNTIL '[' condition ']'

    '['  shift, and go to state 36
    '{'  shift, and go to state 37


State 7

   23 whether: WHETHER • '[' condition ']' THEN ':' '{' stmts '}'
   24        | WHETHER • '[' condition ']' THEN ':' '{' stmts '}' OTHERWISE ':' '{' stmts '}'

    '['  shift, and go to state 38


State 8

   57 return: RETURN • expr

    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 39
    '['     shift, and go to state 19
    '('     shift, and go to state 20

    MINUS     [reduce using rule 44 (value)]
    $default  reduce using rule 44 (value)

    expr     go to state 40
    value    go to state 30
    list     go to state 31
    funcall  go to state 41


State 9

   58 ufunction: DEFINE • ID '(' symlist ')' '{' stmts '}'
   59          | DEFINE • ID '(' ')' '{' stmts '}'

    ID  shift, and go to state 42


State 10

   40 expr: MINUS • expr

    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 39
    '['     shift, and go to state 19
    '('     shift, and go to state 20

    MINUS     [reduce using rule 44 (value)]
    ABS       [reduce using rule 44 (value)]
    $default  reduce using rule 44 (value)

    expr     go to state 43
    value    go to state 30
    list     go to state 31
    funcall  go to state 41


State 11

   39 expr: ABS • expr ABS

    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 39
    '['     shift, and go to state 19
    '('     shift, and go to state 20

    MINUS     [reduce using rule 44 (value)]
    ABS       [reduce using rule 44 (value)]
    $default  reduce using rule 44 (value)

    expr     go to state 44
    value    go to state 30
    list     go to state 31
    funcall  go to state 41


State 12

   45 value: NUM •

    $default  reduce using rule 45 (value)


State 13

   46 value: BINARY •

    $default  reduce using rule 46 (value)


State 14

   47 value: ROMAN •

    $default  reduce using rule 47 (value)


State 15

   49 value: STR •

    $default  reduce using rule 49 (value)


State 16

   61 funcall: FUNC • '(' explist ')'

    '('  shift, and go to state 45


State 17

   19 declare: DATA_TYPE • ID init

    ID  shift, and go to state 46


State 18

   22 assignment: ID • ASSIGN expr
   48 value: ID •
   60 funcall: ID • '(' explist ')'

    ASSIGN  shift, and go to state 47
    '('     shift, and go to state 48

    $default  reduce using rule 48 (value)


State 19

   51 list: '[' • ']'
   52     | '[' • explist ']'

    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 39
    '['     shift, and go to state 19
    ']'     shift, and go to state 49
    '('     shift, and go to state 20

    MINUS     [reduce using rule 44 (value)]
    ']'       [reduce using rule 44 (value)]
    $default  reduce using rule 44 (value)

    expr     go to state 50
    value    go to state 30
    list     go to state 31
    explist  go to state 51
    funcall  go to state 41


State 20

   41 expr: '(' • expr ')'

    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 39
    '['     shift, and go to state 19
    '('     shift, and go to state 20

    MINUS     [reduce using rule 44 (value)]
    $default  reduce using rule 44 (value)

    expr     go to state 52
    value    go to state 30
    list     go to state 31
    funcall  go to state 41


State 21

    3 START: START stmts •

    $default  reduce using rule 3 (START)


State 22

    7 stmts: stmt • ';' stmts
    8      | stmt • ';'

    ';'  shift, and go to state 53


State 23

    9 stmts: flow • stmts
   10      | flow •

    FROM       shift, and go to state 5
    WHEN       shift, and go to state 6
    WHETHER    shift, and go to state 7
    RETURN     shift, and go to state 8
    MINUS      shift, and go to state 10
    ABS        shift, and go to state 11
    NUM        shift, and go to state 12
    BINARY     shift, and go to state 13
    ROMAN      shift, and go to state 14
    STR        shift, and go to state 15
    FUNC       shift, and go to state 16
    DATA_TYPE  shift, and go to state 17
    ID         shift, and go to state 18
    '['        shift, and go to state 19
    '('        shift, and go to state 20

    FROM       [reduce using rule 10 (stmts)]
    WHEN       [reduce using rule 10 (stmts)]
    WHETHER    [reduce using rule 10 (stmts)]
    RETURN     [reduce using rule 10 (stmts)]
    PLUS       reduce using rule 10 (stmts)
    PLUS       [reduce using rule 44 (value)]
    MINUS      [reduce using rule 10 (stmts)]
    MINUS      [reduce using rule 44 (value)]
    MUL        reduce using rule 10 (stmts)
    MUL        [reduce using rule 44 (value)]
    DIV        reduce using rule 10 (stmts)
    DIV        [reduce using rule 44 (value)]
    POW        reduce using rule 10 (stmts)
    POW        [reduce using rule 44 (value)]
    ABS        [reduce using rule 10 (stmts)]
    NUM        [reduce using rule 10 (stmts)]
    BINARY     [reduce using rule 10 (stmts)]
    ROMAN      [reduce using rule 10 (stmts)]
    STR        [reduce using rule 10 (stmts)]
    FUNC       [reduce using rule 10 (stmts)]
    DATA_TYPE  [reduce using rule 10 (stmts)]
    ID         [reduce using rule 10 (stmts)]
    ';'        reduce using rule 10 (stmts)
    ';'        [reduce using rule 44 (value)]
    '['        [reduce using rule 10 (stmts)]
    '('        [reduce using rule 10 (stmts)]
    $default   reduce using rule 10 (stmts)

    stmts       go to state 54
    stmt        go to state 22
    flow        go to state 23
    declare     go to state 24
    assignment  go to state 25
    whether     go to state 26
    when        go to state 27
    from        go to state 28
    expr        go to state 29
    value       go to state 30
    list        go to state 31
    return      go to state 32
    funcall     go to state 34


State 24

   11 stmt: declare •

    $default  reduce using rule 11 (stmt)


State 25

   12 stmt: assignment •

    $default  reduce using rule 12 (stmt)


State 26

   16 flow: whether •

    $default  reduce using rule 16 (flow)


State 27

   17 flow: when •

    $default  reduce using rule 17 (flow)


State 28

   18 flow: from •

    $default  reduce using rule 18 (flow)


State 29

   15 stmt: expr •
   34 expr: expr • PLUS expr
   35     | expr • MINUS expr
   36     | expr • MUL expr
   37     | expr • DIV expr
   38     | expr • POW expr

    PLUS   shift, and go to state 55
    MINUS  shift, and go to state 56
    MUL    shift, and go to state 57
    DIV    shift, and go to state 58
    POW    shift, and go to state 59

    $default  reduce using rule 15 (stmt)


State 30

   42 expr: value •

    $default  reduce using rule 42 (expr)


State 31

   50 value: list •

    $default  reduce using rule 50 (value)


State 32

   14 stmt: return •

    $default  reduce using rule 14 (stmt)


State 33

    4 START: START ufunction •

    $default  reduce using rule 4 (START)


State 34

   13 stmt: funcall •
   43 expr: funcall •

    ';'       reduce using rule 13 (stmt)
    ';'       [reduce using rule 43 (expr)]
    $default  reduce using rule 43 (expr)


State 35

   27 from: FROM '[' • declare TO expr STEP expr ']' '{' stmts '}'

    DATA_TYPE  shift, and go to state 17

    declare  go to state 60


State 36

   25 when: WHEN '[' • condition ']' '{' stmts '}'

    NOT     shift, and go to state 61
    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 39
    '['     shift, and go to state 19
    '('     shift, and go to state 62

    MINUS     [reduce using rule 44 (value)]
    $default  reduce using rule 44 (value)

    condition  go to state 63
    expr       go to state 64
    value      go to state 30
    list       go to state 31
    funcall    go to state 41


State 37

   26 when: WHEN '{' • stmts '}' UNTIL '[' condition ']'

    FROM       shift, and go to state 5
    WHEN       shift, and go to state 6
    WHETHER    shift, and go to state 7
    RETURN     shift, and go to state 8
    MINUS      shift, and go to state 10
    ABS        shift, and go to state 11
    NUM        shift, and go to state 12
    BINARY     shift, and go to state 13
    ROMAN      shift, and go to state 14
    STR        shift, and go to state 15
    FUNC       shift, and go to state 16
    DATA_TYPE  shift, and go to state 17
    ID         shift, and go to state 18
    '['        shift, and go to state 19
    '('        shift, and go to state 20

    MINUS     [reduce using rule 44 (value)]
    $default  reduce using rule 44 (value)

    stmts       go to state 65
    stmt        go to state 22
    flow        go to state 23
    declare     go to state 24
    assignment  go to state 25
    whether     go to state 26
    when        go to state 27
    from        go to state 28
    expr        go to state 29
    value       go to state 30
    list        go to state 31
    return      go to state 32
    funcall     go to state 34


State 38

   23 whether: WHETHER '[' • condition ']' THEN ':' '{' stmts '}'
   24        | WHETHER '[' • condition ']' THEN ':' '{' stmts '}' OTHERWISE ':' '{' stmts '}'

    NOT     shift, and go to state 61
    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 39
    '['     shift, and go to state 19
    '('     shift, and go to state 62

    MINUS     [reduce using rule 44 (value)]
    $default  reduce using rule 44 (value)

    condition  go to state 66
    expr       go to state 64
    value      go to state 30
    list       go to state 31
    funcall    go to state 41


State 39

   48 value: ID •
   60 funcall: ID • '(' explist ')'

    '('  shift, and go to state 48

    $default  reduce using rule 48 (value)


State 40

   34 expr: expr • PLUS expr
   35     | expr • MINUS expr
   36     | expr • MUL expr
   37     | expr • DIV expr
   38     | expr • POW expr
   57 return: RETURN expr •

    PLUS   shift, and go to state 55
    MINUS  shift, and go to state 56
    MUL    shift, and go to state 57
    DIV    shift, and go to state 58
    POW    shift, and go to state 59

    $default  reduce using rule 57 (return)


State 41

   43 expr: funcall •

    $default  reduce using rule 43 (expr)


State 42

   58 ufunction: DEFINE ID • '(' symlist ')' '{' stmts '}'
   59          | DEFINE ID • '(' ')' '{' stmts '}'

    '('  shift, and go to state 67


State 43

   34 expr: expr • PLUS expr
   35     | expr • MINUS expr
   36     | expr • MUL expr
   37     | expr • DIV expr
   38     | expr • POW expr
   40     | MINUS expr •

    $default  reduce using rule 40 (expr)


State 44

   34 expr: expr • PLUS expr
   35     | expr • MINUS expr
   36     | expr • MUL expr
   37     | expr • DIV expr
   38     | expr • POW expr
   39     | ABS expr • ABS

    PLUS   shift, and go to state 55
    MINUS  shift, and go to state 56
    MUL    shift, and go to state 57
    DIV    shift, and go to state 58
    POW    shift, and go to state 59
    ABS    shift, and go to state 68


State 45

   61 funcall: FUNC '(' • explist ')'

    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 39
    '['     shift, and go to state 19
    '('     shift, and go to state 20

    MINUS     [reduce using rule 44 (value)]
    $default  reduce using rule 44 (value)

    expr     go to state 50
    value    go to state 30
    list     go to state 31
    explist  go to state 69
    funcall  go to state 41


State 46

   19 declare: DATA_TYPE ID • init

    ASSIGN  shift, and go to state 70

    $default  reduce using rule 21 (init)

    init  go to state 71


State 47

   22 assignment: ID ASSIGN • expr

    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 39
    '['     shift, and go to state 19
    '('     shift, and go to state 20

    MINUS     [reduce using rule 44 (value)]
    $default  reduce using rule 44 (value)

    expr     go to state 72
    value    go to state 30
    list     go to state 31
    funcall  go to state 41


State 48

   60 funcall: ID '(' • explist ')'

    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 39
    '['     shift, and go to state 19
    '('     shift, and go to state 20

    MINUS     [reduce using rule 44 (value)]
    $default  reduce using rule 44 (value)

    expr     go to state 50
    value    go to state 30
    list     go to state 31
    explist  go to state 73
    funcall  go to state 41


State 49

   51 list: '[' ']' •

    $default  reduce using rule 51 (list)


State 50

   34 expr: expr • PLUS expr
   35     | expr • MINUS expr
   36     | expr • MUL expr
   37     | expr • DIV expr
   38     | expr • POW expr
   53 explist: expr •
   54        | expr • ',' explist

    PLUS   shift, and go to state 55
    MINUS  shift, and go to state 56
    MUL    shift, and go to state 57
    DIV    shift, and go to state 58
    POW    shift, and go to state 59
    ','    shift, and go to state 74

    $default  reduce using rule 53 (explist)


State 51

   52 list: '[' explist • ']'

    ']'  shift, and go to state 75


State 52

   34 expr: expr • PLUS expr
   35     | expr • MINUS expr
   36     | expr • MUL expr
   37     | expr • DIV expr
   38     | expr • POW expr
   41     | '(' expr • ')'

    PLUS   shift, and go to state 55
    MINUS  shift, and go to state 56
    MUL    shift, and go to state 57
    DIV    shift, and go to state 58
    POW    shift, and go to state 59
    ')'    shift, and go to state 76


State 53

    7 stmts: stmt ';' • stmts
    8      | stmt ';' •

    FROM       shift, and go to state 5
    WHEN       shift, and go to state 6
    WHETHER    shift, and go to state 7
    RETURN     shift, and go to state 8
    MINUS      shift, and go to state 10
    ABS        shift, and go to state 11
    NUM        shift, and go to state 12
    BINARY     shift, and go to state 13
    ROMAN      shift, and go to state 14
    STR        shift, and go to state 15
    FUNC       shift, and go to state 16
    DATA_TYPE  shift, and go to state 17
    ID         shift, and go to state 18
    '['        shift, and go to state 19
    '('        shift, and go to state 20

    FROM       [reduce using rule 8 (stmts)]
    WHEN       [reduce using rule 8 (stmts)]
    WHETHER    [reduce using rule 8 (stmts)]
    RETURN     [reduce using rule 8 (stmts)]
    PLUS       reduce using rule 8 (stmts)
    PLUS       [reduce using rule 44 (value)]
    MINUS      [reduce using rule 8 (stmts)]
    MINUS      [reduce using rule 44 (value)]
    MUL        reduce using rule 8 (stmts)
    MUL        [reduce using rule 44 (value)]
    DIV        reduce using rule 8 (stmts)
    DIV        [reduce using rule 44 (value)]
    POW        reduce using rule 8 (stmts)
    POW        [reduce using rule 44 (value)]
    ABS        [reduce using rule 8 (stmts)]
    NUM        [reduce using rule 8 (stmts)]
    BINARY     [reduce using rule 8 (stmts)]
    ROMAN      [reduce using rule 8 (stmts)]
    STR        [reduce using rule 8 (stmts)]
    FUNC       [reduce using rule 8 (stmts)]
    DATA_TYPE  [reduce using rule 8 (stmts)]
    ID         [reduce using rule 8 (stmts)]
    ';'        reduce using rule 8 (stmts)
    ';'        [reduce using rule 44 (value)]
    '['        [reduce using rule 8 (stmts)]
    '('        [reduce using rule 8 (stmts)]
    $default   reduce using rule 8 (stmts)

    stmts       go to state 77
    stmt        go to state 22
    flow        go to state 23
    declare     go to state 24
    assignment  go to state 25
    whether     go to state 26
    when        go to state 27
    from        go to state 28
    expr        go to state 29
    value       go to state 30
    list        go to state 31
    return      go to state 32
    funcall     go to state 34


State 54

    9 stmts: flow stmts •

    $default  reduce using rule 9 (stmts)


State 55

   34 expr: expr PLUS • expr

    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 39
    '['     shift, and go to state 19
    '('     shift, and go to state 20

    MINUS     [reduce using rule 44 (value)]
    ABS       [reduce using rule 44 (value)]
    $default  reduce using rule 44 (value)

    expr     go to state 78
    value    go to state 30
    list     go to state 31
    funcall  go to state 41


State 56

   35 expr: expr MINUS • expr

    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 39
    '['     shift, and go to state 19
    '('     shift, and go to state 20

    MINUS     [reduce using rule 44 (value)]
    ABS       [reduce using rule 44 (value)]
    $default  reduce using rule 44 (value)

    expr     go to state 79
    value    go to state 30
    list     go to state 31
    funcall  go to state 41


State 57

   36 expr: expr MUL • expr

    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 39
    '['     shift, and go to state 19
    '('     shift, and go to state 20

    MINUS     [reduce using rule 44 (value)]
    ABS       [reduce using rule 44 (value)]
    $default  reduce using rule 44 (value)

    expr     go to state 80
    value    go to state 30
    list     go to state 31
    funcall  go to state 41


State 58

   37 expr: expr DIV • expr

    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 39
    '['     shift, and go to state 19
    '('     shift, and go to state 20

    MINUS     [reduce using rule 44 (value)]
    ABS       [reduce using rule 44 (value)]
    $default  reduce using rule 44 (value)

    expr     go to state 81
    value    go to state 30
    list     go to state 31
    funcall  go to state 41


State 59

   38 expr: expr POW • expr

    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 39
    '['     shift, and go to state 19
    '('     shift, and go to state 20

    MINUS     [reduce using rule 44 (value)]
    ABS       [reduce using rule 44 (value)]
    $default  reduce using rule 44 (value)

    expr     go to state 82
    value    go to state 30
    list     go to state 31
    funcall  go to state 41


State 60

   27 from: FROM '[' declare • TO expr STEP expr ']' '{' stmts '}'

    TO  shift, and go to state 83


State 61

   31 condition: NOT • condition

    NOT     shift, and go to state 61
    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 39
    '['     shift, and go to state 19
    '('     shift, and go to state 62

    MINUS     [reduce using rule 44 (value)]
    $default  reduce using rule 44 (value)

    condition  go to state 84
    expr       go to state 64
    value      go to state 30
    list       go to state 31
    funcall    go to state 41


State 62

   32 condition: '(' • condition ')'
   41 expr: '(' • expr ')'

    NOT     shift, and go to state 61
    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 39
    '['     shift, and go to state 19
    '('     shift, and go to state 62

    MINUS     [reduce using rule 44 (value)]
    $default  reduce using rule 44 (value)

    condition  go to state 85
    expr       go to state 86
    value      go to state 30
    list       go to state 31
    funcall    go to state 41


State 63

   25 when: WHEN '[' condition • ']' '{' stmts '}'
   29 condition: condition • AND condition
   30          | condition • OR condition

    AND  shift, and go to state 87
    OR   shift, and go to state 88
    ']'  shift, and go to state 89


State 64

   28 condition: expr • CMP expr
   33          | expr •
   34 expr: expr • PLUS expr
   35     | expr • MINUS expr
   36     | expr • MUL expr
   37     | expr • DIV expr
   38     | expr • POW expr

    PLUS   shift, and go to state 55
    MINUS  shift, and go to state 56
    MUL    shift, and go to state 57
    DIV    shift, and go to state 58
    POW    shift, and go to state 59
    CMP    shift, and go to state 90

    $default  reduce using rule 33 (condition)


State 65

   26 when: WHEN '{' stmts • '}' UNTIL '[' condition ']'

    '}'  shift, and go to state 91


State 66

   23 whether: WHETHER '[' condition • ']' THEN ':' '{' stmts '}'
   24        | WHETHER '[' condition • ']' THEN ':' '{' stmts '}' OTHERWISE ':' '{' stmts '}'
   29 condition: condition • AND condition
   30          | condition • OR condition

    AND  shift, and go to state 87
    OR   shift, and go to state 88
    ']'  shift, and go to state 92


State 67

   58 ufunction: DEFINE ID '(' • symlist ')' '{' stmts '}'
   59          | DEFINE ID '(' • ')' '{' stmts '}'

    ID   shift, and go to state 93
    ')'  shift, and go to state 94

    symlist  go to state 95


State 68

   39 expr: ABS expr ABS •

    $default  reduce using rule 39 (expr)


State 69

   61 funcall: FUNC '(' explist • ')'

    ')'  shift, and go to state 96


State 70

   20 init: ASSIGN • expr

    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 39
    '['     shift, and go to state 19
    '('     shift, and go to state 20

    MINUS     [reduce using rule 44 (value)]
    $default  reduce using rule 44 (value)

    expr     go to state 97
    value    go to state 30
    list     go to state 31
    funcall  go to state 41


State 71

   19 declare: DATA_TYPE ID init •

    $default  reduce using rule 19 (declare)


State 72

   22 assignment: ID ASSIGN expr •
   34 expr: expr • PLUS expr
   35     | expr • MINUS expr
   36     | expr • MUL expr
   37     | expr • DIV expr
   38     | expr • POW expr

    PLUS   shift, and go to state 55
    MINUS  shift, and go to state 56
    MUL    shift, and go to state 57
    DIV    shift, and go to state 58
    POW    shift, and go to state 59

    $default  reduce using rule 22 (assignment)


State 73

   60 funcall: ID '(' explist • ')'

    ')'  shift, and go to state 98


State 74

   54 explist: expr ',' • explist

    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 39
    '['     shift, and go to state 19
    '('     shift, and go to state 20

    MINUS     [reduce using rule 44 (value)]
    $default  reduce using rule 44 (value)

    expr     go to state 50
    value    go to state 30
    list     go to state 31
    explist  go to state 99
    funcall  go to state 41


State 75

   52 list: '[' explist ']' •

    $default  reduce using rule 52 (list)


State 76

   41 expr: '(' expr ')' •

    $default  reduce using rule 41 (expr)


State 77

    7 stmts: stmt ';' stmts •

    $default  reduce using rule 7 (stmts)


State 78

   34 expr: expr • PLUS expr
   34     | expr PLUS expr •
   35     | expr • MINUS expr
   36     | expr • MUL expr
   37     | expr • DIV expr
   38     | expr • POW expr

    MUL  shift, and go to state 57
    DIV  shift, and go to state 58

    $default  reduce using rule 34 (expr)


State 79

   34 expr: expr • PLUS expr
   35     | expr • MINUS expr
   35     | expr MINUS expr •
   36     | expr • MUL expr
   37     | expr • DIV expr
   38     | expr • POW expr

    MUL  shift, and go to state 57
    DIV  shift, and go to state 58

    $default  reduce using rule 35 (expr)


State 80

   34 expr: expr • PLUS expr
   35     | expr • MINUS expr
   36     | expr • MUL expr
   36     | expr MUL expr •
   37     | expr • DIV expr
   38     | expr • POW expr

    $default  reduce using rule 36 (expr)


State 81

   34 expr: expr • PLUS expr
   35     | expr • MINUS expr
   36     | expr • MUL expr
   37     | expr • DIV expr
   37     | expr DIV expr •
   38     | expr • POW expr

    $default  reduce using rule 37 (expr)


State 82

   34 expr: expr • PLUS expr
   35     | expr • MINUS expr
   36     | expr • MUL expr
   37     | expr • DIV expr
   38     | expr • POW expr
   38     | expr POW expr •

    MUL  shift, and go to state 57
    DIV  shift, and go to state 58

    $default  reduce using rule 38 (expr)


State 83

   27 from: FROM '[' declare TO • expr STEP expr ']' '{' stmts '}'

    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 39
    '['     shift, and go to state 19
    '('     shift, and go to state 20

    MINUS     [reduce using rule 44 (value)]
    $default  reduce using rule 44 (value)

    expr     go to state 100
    value    go to state 30
    list     go to state 31
    funcall  go to state 41


State 84

   29 condition: condition • AND condition
   30          | condition • OR condition
   31          | NOT condition •

    AND  shift, and go to state 87
    OR   shift, and go to state 88

    AND       [reduce using rule 31 (condition)]
    OR        [reduce using rule 31 (condition)]
    $default  reduce using rule 31 (condition)


State 85

   29 condition: condition • AND condition
   30          | condition • OR condition
   32          | '(' condition • ')'

    AND  shift, and go to state 87
    OR   shift, and go to state 88
    ')'  shift, and go to state 101


State 86

   28 condition: expr • CMP expr
   33          | expr •
   34 expr: expr • PLUS expr
   35     | expr • MINUS expr
   36     | expr • MUL expr
   37     | expr • DIV expr
   38     | expr • POW expr
   41     | '(' expr • ')'

    PLUS   shift, and go to state 55
    MINUS  shift, and go to state 56
    MUL    shift, and go to state 57
    DIV    shift, and go to state 58
    POW    shift, and go to state 59
    CMP    shift, and go to state 90
    ')'    shift, and go to state 76

    ')'       [reduce using rule 33 (condition)]
    $default  reduce using rule 33 (condition)


State 87

   29 condition: condition AND • condition

    NOT     shift, and go to state 61
    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 39
    '['     shift, and go to state 19
    '('     shift, and go to state 62

    MINUS     [reduce using rule 44 (value)]
    $default  reduce using rule 44 (value)

    condition  go to state 102
    expr       go to state 64
    value      go to state 30
    list       go to state 31
    funcall    go to state 41


State 88

   30 condition: condition OR • condition

    NOT     shift, and go to state 61
    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 39
    '['     shift, and go to state 19
    '('     shift, and go to state 62

    MINUS     [reduce using rule 44 (value)]
    $default  reduce using rule 44 (value)

    condition  go to state 103
    expr       go to state 64
    value      go to state 30
    list       go to state 31
    funcall    go to state 41


State 89

   25 when: WHEN '[' condition ']' • '{' stmts '}'

    '{'  shift, and go to state 104


State 90

   28 condition: expr CMP • expr

    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 39
    '['     shift, and go to state 19
    '('     shift, and go to state 20

    MINUS     [reduce using rule 44 (value)]
    $default  reduce using rule 44 (value)

    expr     go to state 105
    value    go to state 30
    list     go to state 31
    funcall  go to state 41


State 91

   26 when: WHEN '{' stmts '}' • UNTIL '[' condition ']'

    UNTIL  shift, and go to state 106


State 92

   23 whether: WHETHER '[' condition ']' • THEN ':' '{' stmts '}'
   24        | WHETHER '[' condition ']' • THEN ':' '{' stmts '}' OTHERWISE ':' '{' stmts '}'

    THEN  shift, and go to state 107


State 93

   55 symlist: ID •
   56        | ID • ',' symlist

    ','  shift, and go to state 108

    $default  reduce using rule 55 (symlist)


State 94

   59 ufunction: DEFINE ID '(' ')' • '{' stmts '}'

    '{'  shift, and go to state 109


State 95

   58 ufunction: DEFINE ID '(' symlist • ')' '{' stmts '}'

    ')'  shift, and go to state 110


State 96

   61 funcall: FUNC '(' explist ')' •

    $default  reduce using rule 61 (funcall)


State 97

   20 init: ASSIGN expr •
   34 expr: expr • PLUS expr
   35     | expr • MINUS expr
   36     | expr • MUL expr
   37     | expr • DIV expr
   38     | expr • POW expr

    PLUS   shift, and go to state 55
    MINUS  shift, and go to state 56
    MUL    shift, and go to state 57
    DIV    shift, and go to state 58
    POW    shift, and go to state 59

    $default  reduce using rule 20 (init)


State 98

   60 funcall: ID '(' explist ')' •

    $default  reduce using rule 60 (funcall)


State 99

   54 explist: expr ',' explist •

    $default  reduce using rule 54 (explist)


State 100

   27 from: FROM '[' declare TO expr • STEP expr ']' '{' stmts '}'
   34 expr: expr • PLUS expr
   35     | expr • MINUS expr
   36     | expr • MUL expr
   37     | expr • DIV expr
   38     | expr • POW expr

    STEP   shift, and go to state 111
    PLUS   shift, and go to state 55
    MINUS  shift, and go to state 56
    MUL    shift, and go to state 57
    DIV    shift, and go to state 58
    POW    shift, and go to state 59


State 101

   32 condition: '(' condition ')' •

    $default  reduce using rule 32 (condition)


State 102

   29 condition: condition • AND condition
   29          | condition AND condition •
   30          | condition • OR condition

    AND  shift, and go to state 87
    OR   shift, and go to state 88

    AND       [reduce using rule 29 (condition)]
    OR        [reduce using rule 29 (condition)]
    $default  reduce using rule 29 (condition)


State 103

   29 condition: condition • AND condition
   30          | condition • OR condition
   30          | condition OR condition •

    AND  shift, and go to state 87
    OR   shift, and go to state 88

    AND       [reduce using rule 30 (condition)]
    OR        [reduce using rule 30 (condition)]
    $default  reduce using rule 30 (condition)


State 104

   25 when: WHEN '[' condition ']' '{' • stmts '}'

    FROM       shift, and go to state 5
    WHEN       shift, and go to state 6
    WHETHER    shift, and go to state 7
    RETURN     shift, and go to state 8
    MINUS      shift, and go to state 10
    ABS        shift, and go to state 11
    NUM        shift, and go to state 12
    BINARY     shift, and go to state 13
    ROMAN      shift, and go to state 14
    STR        shift, and go to state 15
    FUNC       shift, and go to state 16
    DATA_TYPE  shift, and go to state 17
    ID         shift, and go to state 18
    '['        shift, and go to state 19
    '('        shift, and go to state 20

    MINUS     [reduce using rule 44 (value)]
    $default  reduce using rule 44 (value)

    stmts       go to state 112
    stmt        go to state 22
    flow        go to state 23
    declare     go to state 24
    assignment  go to state 25
    whether     go to state 26
    when        go to state 27
    from        go to state 28
    expr        go to state 29
    value       go to state 30
    list        go to state 31
    return      go to state 32
    funcall     go to state 34


State 105

   28 condition: expr CMP expr •
   34 expr: expr • PLUS expr
   35     | expr • MINUS expr
   36     | expr • MUL expr
   37     | expr • DIV expr
   38     | expr • POW expr

    PLUS   shift, and go to state 55
    MINUS  shift, and go to state 56
    MUL    shift, and go to state 57
    DIV    shift, and go to state 58
    POW    shift, and go to state 59

    $default  reduce using rule 28 (condition)


State 106

   26 when: WHEN '{' stmts '}' UNTIL • '[' condition ']'

    '['  shift, and go to state 113


State 107

   23 whether: WHETHER '[' condition ']' THEN • ':' '{' stmts '}'
   24        | WHETHER '[' condition ']' THEN • ':' '{' stmts '}' OTHERWISE ':' '{' stmts '}'

    ':'  shift, and go to state 114


State 108

   56 symlist: ID ',' • symlist

    ID  shift, and go to state 93

    symlist  go to state 115


State 109

   59 ufunction: DEFINE ID '(' ')' '{' • stmts '}'

    FROM       shift, and go to state 5
    WHEN       shift, and go to state 6
    WHETHER    shift, and go to state 7
    RETURN     shift, and go to state 8
    MINUS      shift, and go to state 10
    ABS        shift, and go to state 11
    NUM        shift, and go to state 12
    BINARY     shift, and go to state 13
    ROMAN      shift, and go to state 14
    STR        shift, and go to state 15
    FUNC       shift, and go to state 16
    DATA_TYPE  shift, and go to state 17
    ID         shift, and go to state 18
    '['        shift, and go to state 19
    '('        shift, and go to state 20

    MINUS     [reduce using rule 44 (value)]
    $default  reduce using rule 44 (value)

    stmts       go to state 116
    stmt        go to state 22
    flow        go to state 23
    declare     go to state 24
    assignment  go to state 25
    whether     go to state 26
    when        go to state 27
    from        go to state 28
    expr        go to state 29
    value       go to state 30
    list        go to state 31
    return      go to state 32
    funcall     go to state 34


State 110

   58 ufunction: DEFINE ID '(' symlist ')' • '{' stmts '}'

    '{'  shift, and go to state 117


State 111

   27 from: FROM '[' declare TO expr STEP • expr ']' '{' stmts '}'

    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 39
    '['     shift, and go to state 19
    '('     shift, and go to state 20

    MINUS     [reduce using rule 44 (value)]
    $default  reduce using rule 44 (value)

    expr     go to state 118
    value    go to state 30
    list     go to state 31
    funcall  go to state 41


State 112

   25 when: WHEN '[' condition ']' '{' stmts • '}'

    '}'  shift, and go to state 119


State 113

   26 when: WHEN '{' stmts '}' UNTIL '[' • condition ']'

    NOT     shift, and go to state 61
    MINUS   shift, and go to state 10
    ABS     shift, and go to state 11
    NUM     shift, and go to state 12
    BINARY  shift, and go to state 13
    ROMAN   shift, and go to state 14
    STR     shift, and go to state 15
    FUNC    shift, and go to state 16
    ID      shift, and go to state 39
    '['     shift, and go to state 19
    '('     shift, and go to state 62

    MINUS     [reduce using rule 44 (value)]
    $default  reduce using rule 44 (value)

    condition  go to state 120
    expr       go to state 64
    value      go to state 30
    list       go to state 31
    funcall    go to state 41


State 114

   23 whether: WHETHER '[' condition ']' THEN ':' • '{' stmts '}'
   24        | WHETHER '[' condition ']' THEN ':' • '{' stmts '}' OTHERWISE ':' '{' stmts '}'

    '{'  shift, and go to state 121


State 115

   56 symlist: ID ',' symlist •

    $default  reduce using rule 56 (symlist)


State 116

   59 ufunction: DEFINE ID '(' ')' '{' stmts • '}'

    '}'  shift, and go to state 122


State 117

   58 ufunction: DEFINE ID '(' symlist ')' '{' • stmts '}'

    FROM       shift, and go to state 5
    WHEN       shift, and go to state 6
    WHETHER    shift, and go to state 7
    RETURN     shift, and go to state 8
    MINUS      shift, and go to state 10
    ABS        shift, and go to state 11
    NUM        shift, and go to state 12
    BINARY     shift, and go to state 13
    ROMAN      shift, and go to state 14
    STR        shift, and go to state 15
    FUNC       shift, and go to state 16
    DATA_TYPE  shift, and go to state 17
    ID         shift, and go to state 18
    '['        shift, and go to state 19
    '('        shift, and go to state 20

    MINUS     [reduce using rule 44 (value)]
    $default  reduce using rule 44 (value)

    stmts       go to state 123
    stmt        go to state 22
    flow        go to state 23
    declare     go to state 24
    assignment  go to state 25
    whether     go to state 26
    when        go to state 27
    from        go to state 28
    expr        go to state 29
    value       go to state 30
    list        go to state 31
    return      go to state 32
    funcall     go to state 34


State 118

   27 from: FROM '[' declare TO expr STEP expr • ']' '{' stmts '}'
   34 expr: expr • PLUS expr
   35     | expr • MINUS expr
   36     | expr • MUL expr
   37     | expr • DIV expr
   38     | expr • POW expr

    PLUS   shift, and go to state 55
    MINUS  shift, and go to state 56
    MUL    shift, and go to state 57
    DIV    shift, and go to state 58
    POW    shift, and go to state 59
    ']'    shift, and go to state 124


State 119

   25 when: WHEN '[' condition ']' '{' stmts '}' •

    $default  reduce using rule 25 (when)


State 120

   26 when: WHEN '{' stmts '}' UNTIL '[' condition • ']'
   29 condition: condition • AND condition
   30          | condition • OR condition

    AND  shift, and go to state 87
    OR   shift, and go to state 88
    ']'  shift, and go to state 125


State 121

   23 whether: WHETHER '[' condition ']' THEN ':' '{' • stmts '}'
   24        | WHETHER '[' condition ']' THEN ':' '{' • stmts '}' OTHERWISE ':' '{' stmts '}'

    FROM       shift, and go to state 5
    WHEN       shift, and go to state 6
    WHETHER    shift, and go to state 7
    RETURN     shift, and go to state 8
    MINUS      shift, and go to state 10
    ABS        shift, and go to state 11
    NUM        shift, and go to state 12
    BINARY     shift, and go to state 13
    ROMAN      shift, and go to state 14
    STR        shift, and go to state 15
    FUNC       shift, and go to state 16
    DATA_TYPE  shift, and go to state 17
    ID         shift, and go to state 18
    '['        shift, and go to state 19
    '('        shift, and go to state 20

    MINUS     [reduce using rule 44 (value)]
    $default  reduce using rule 44 (value)

    stmts       go to state 126
    stmt        go to state 22
    flow        go to state 23
    declare     go to state 24
    assignment  go to state 25
    whether     go to state 26
    when        go to state 27
    from        go to state 28
    expr        go to state 29
    value       go to state 30
    list        go to state 31
    return      go to state 32
    funcall     go to state 34


State 122

   59 ufunction: DEFINE ID '(' ')' '{' stmts '}' •

    $default  reduce using rule 59 (ufunction)


State 123

   58 ufunction: DEFINE ID '(' symlist ')' '{' stmts • '}'

    '}'  shift, and go to state 127


State 124

   27 from: FROM '[' declare TO expr STEP expr ']' • '{' stmts '}'

    '{'  shift, and go to state 128


State 125

   26 when: WHEN '{' stmts '}' UNTIL '[' condition ']' •

    $default  reduce using rule 26 (when)


State 126

   23 whether: WHETHER '[' condition ']' THEN ':' '{' stmts • '}'
   24        | WHETHER '[' condition ']' THEN ':' '{' stmts • '}' OTHERWISE ':' '{' stmts '}'

    '}'  shift, and go to state 129


State 127

   58 ufunction: DEFINE ID '(' symlist ')' '{' stmts '}' •

    $default  reduce using rule 58 (ufunction)


State 128

   27 from: FROM '[' declare TO expr STEP expr ']' '{' • stmts '}'

    FROM       shift, and go to state 5
    WHEN       shift, and go to state 6
    WHETHER    shift, and go to state 7
    RETURN     shift, and go to state 8
    MINUS      shift, and go to state 10
    ABS        shift, and go to state 11
    NUM        shift, and go to state 12
    BINARY     shift, and go to state 13
    ROMAN      shift, and go to state 14
    STR        shift, and go to state 15
    FUNC       shift, and go to state 16
    DATA_TYPE  shift, and go to state 17
    ID         shift, and go to state 18
    '['        shift, and go to state 19
    '('        shift, and go to state 20

    MINUS     [reduce using rule 44 (value)]
    $default  reduce using rule 44 (value)

    stmts       go to state 130
    stmt        go to state 22
    flow        go to state 23
    declare     go to state 24
    assignment  go to state 25
    whether     go to state 26
    when        go to state 27
    from        go to state 28
    expr        go to state 29
    value       go to state 30
    list        go to state 31
    return      go to state 32
    funcall     go to state 34


State 129

   23 whether: WHETHER '[' condition ']' THEN ':' '{' stmts '}' •
   24        | WHETHER '[' condition ']' THEN ':' '{' stmts '}' • OTHERWISE ':' '{' stmts '}'

    OTHERWISE  shift, and go to state 131

    $default  reduce using rule 23 (whether)


State 130

   27 from: FROM '[' declare TO expr STEP expr ']' '{' stmts • '}'

    '}'  shift, and go to state 132


State 131

   24 whether: WHETHER '[' condition ']' THEN ':' '{' stmts '}' OTHERWISE • ':' '{' stmts '}'

    ':'  shift, and go to state 133


State 132

   27 from: FROM '[' declare TO expr STEP expr ']' '{' stmts '}' •

    $default  reduce using rule 27 (from)


State 133

   24 whether: WHETHER '[' condition ']' THEN ':' '{' stmts '}' OTHERWISE ':' • '{' stmts '}'

    '{'  shift, and go to state 134


State 134

   24 whether: WHETHER '[' condition ']' THEN ':' '{' stmts '}' OTHERWISE ':' '{' • stmts '}'

    FROM       shift, and go to state 5
    WHEN       shift, and go to state 6
    WHETHER    shift, and go to state 7
    RETURN     shift, and go to state 8
    MINUS      shift, and go to state 10
    ABS        shift, and go to state 11
    NUM        shift, and go to state 12
    BINARY     shift, and go to state 13
    ROMAN      shift, and go to state 14
    STR        shift, and go to state 15
    FUNC       shift, and go to state 16
    DATA_TYPE  shift, and go to state 17
    ID         shift, and go to state 18
    '['        shift, and go to state 19
    '('        shift, and go to state 20

    MINUS     [reduce using rule 44 (value)]
    $default  reduce using rule 44 (value)

    stmts       go to state 135
    stmt        go to state 22
    flow        go to state 23
    declare     go to state 24
    assignment  go to state 25
    whether     go to state 26
    when        go to state 27
    from        go to state 28
    expr        go to state 29
    value       go to state 30
    list        go to state 31
    return      go to state 32
    funcall     go to state 34


State 135

   24 whether: WHETHER '[' condition ']' THEN ':' '{' stmts '}' OTHERWISE ':' '{' stmts • '}'

    '}'  shift, and go to state 136


State 136

   24 whether: WHETHER '[' condition ']' THEN ':' '{' stmts '}' OTHERWISE ':' '{' stmts '}' •

    $default  reduce using rule 24 (whether)

list choiches = [<<rock>>,<<paper>>,<<scissors>>,<<lizard>>,<<spock>>];
num usr_win = 0;
num cpu_win = 0;

define get_winner(player, cpu){
    whether[player == cpu] then: { give_back; }
    whether[(player == 0 and (computer == 2 or computer == 3)) or 
            (player == 1 and (computer == 0 or computer == 4)) or 
            (player == 2 and (computer == 1 or computer == 3)) or 
            (player == 3 and (computer == 1 or computer == 4)) or 
            (player == 4 and (computer == 0 or computer == 2))]
        then: { give_back 1; }
        Otherwise: {give_back -1; }
}

define get_choice_index(in){
    print(in);
    from [num i = 0 to size(choiches)-1 !> 1] {
        whether [in == get(choiches,i)] then: {
            print(i);
            give_back i;
        }
    }
    give_back -1;
}

define fair() {
    give_back casual(size(choiches));
}

define cheat(player_choice){
    from [num i = 0 to size(choiches)-1 !> 1] {
        whether [get_winner(i,player_choice) == 1] then: {
            give_back i;
        }
    }
    give_back fair();
}

num wins = 0;
num losses = 0;
num consecutive_losses = 0;

print(<<Welcome to Rock Paper Scissors Spock>>, <<Lizard#k>>);
when[1] {
    str in = input(<<enter you choices here (Rock, Paper, Scissors, Lizard, Spock or Quit):#k>>);
    num player_choice = get_choice_index(in);
    print(player_choice);
    num computer_choice;
    whether[consecutive_losses >= 2] then: {
        computer_choice = cheat(player_choice);
    } Otherwise : {
        computer_choice = fair;
    }
    num result = get_winner(player_choice,computer_choice);
    whether[result == 1] then: {
        print(<<You won this round>>);
        wins = wins + 1;
        consecutive_losses = consecutive_losses + 1;
    }
    whether[result == -1] then: {
        print(<<you lost this round>>);
        losses = losses + 1;
        consecutive_losses = 0;
    }
    otherwise: { 
        print(<<it's a tie>>);
    }
    print(<<wins>>,wins,<<losses>>,losses);

}